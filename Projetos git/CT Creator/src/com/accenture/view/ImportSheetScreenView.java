/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.accenture.view;

import com.accenture.control.ExtraiPlanilha;
import com.accenture.control.ManipulaDadosSQLite;
import com.accenture.bean.CasoTesteTemp;
import com.accenture.bean.Plano;
import com.accenture.util.CheckTreeManager;
import com.accenture.util.CheckTreeSelectionModel;

import java.awt.Dimension;
import java.awt.Frame;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.JTree;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author Raphael
 */
public class ImportSheetScreenView extends javax.swing.JInternalFrame {

    private CheckTreeManager checkTreeManager;
    private JTree arvoreImportacao;
    private DefaultMutableTreeNode noPai;
    private List<CasoTesteTemp> listCasoTeste = new ArrayList<CasoTesteTemp>();
    private List<CasoTesteTemp> listCTExistente = new ArrayList<CasoTesteTemp>();
    private List<CasoTesteTemp> listCTNovo = new ArrayList<CasoTesteTemp>();

    /**
     * Creates new form GUIImportaPlanilha
     */
    public ImportSheetScreenView() {
        initComponents();
        criaArvore();
        arvoreImportacao.setEnabled(false);
        checkTreeManager.setAtiva(false);
        bntImportar.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textPlanilha = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        bntAdicionarPlanilha = new javax.swing.JButton();
        jLabel30 = new javax.swing.JLabel();
        jCheckBoxConfiguracao = new javax.swing.JCheckBox();
        bntImportar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        bntCancelar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Importa Planilha");
        setPreferredSize(new java.awt.Dimension(1200, 650));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        textPlanilha.setEditable(false);

        jLabel29.setText("Planilha:");

        bntAdicionarPlanilha.setText("Selecionar Planilha");
        bntAdicionarPlanilha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntAdicionarPlanilhaActionPerformed(evt);
            }
        });

        jLabel30.setText("Marque para importar as configurações da planilha.");

        jCheckBoxConfiguracao.setText("Configurações");

        bntImportar.setText("Importar");
        bntImportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntImportarActionPerformed(evt);
            }
        });

        bntCancelar.setText("Cancelar");
        bntCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bntCancelarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1110, Short.MAX_VALUE)
                .addGap(44, 44, 44))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel30)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(textPlanilha, javax.swing.GroupLayout.PREFERRED_SIZE, 623, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(bntAdicionarPlanilha))
                            .addComponent(jCheckBoxConfiguracao)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(491, 491, 491)
                        .addComponent(bntImportar)
                        .addGap(18, 18, 18)
                        .addComponent(bntCancelar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(textPlanilha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bntAdicionarPlanilha))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel30)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxConfiguracao)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bntImportar)
                    .addComponent(bntCancelar))
                .addGap(41, 41, 41))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bntAdicionarPlanilhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntAdicionarPlanilhaActionPerformed
        final Frame GUIPrincipal = new MainScreenView();

        SwingWorker worker = new SwingWorker() {
            JDialog aguarde = new WaitScreenView((JFrame) GUIPrincipal, true);

            @Override
            protected Object doInBackground() throws Exception {

                ExtraiPlanilha ep = new ExtraiPlanilha();

                FileFilter extensao = new FileNameExtensionFilter("Planilhas de Carga TI (*.xlsx)", "xlsx");
                JFileChooser file = new JFileChooser();
                file.setFileSelectionMode(JFileChooser.FILES_ONLY);
                file.setDialogTitle("Selecione a planilha para exportar:");

                file.setFileFilter(extensao);
                int i = file.showSaveDialog(null);

                if (i == 1) {
                    //             JtextFieldLocal.setText("");
                } else {

                    aguarde.setLocationRelativeTo(GUIPrincipal);
                    aguarde.setVisible(true);

                    removeAllFilhos();

                    File arquivo = file.getSelectedFile();
                    ep.setFile(arquivo.getPath());
                    System.out.println(arquivo.getPath());
                    textPlanilha.setText(arquivo.getPath());

                    Plano plano = new Plano();

                    try {
                        ManipulaDadosSQLite bd = new ManipulaDadosSQLite();
                        listCasoTeste = ep.getCTExistentes(textPlanilha.getText());

                        for (int j = 0; j < listCasoTeste.size(); j++) {

                            plano.setCasoTeste(listCasoTeste.get(j).getCasoTeste());

                            //VERIFICA SE O CT EXISTE NA BASE E DIRECIONA PARA A PASTA CORRETA
                            if (listCasoTeste.get(j).getCasoTeste().equals(bd.getPorCasoTeste(plano).getCasoTeste())) {
                                //ADICONA NA PASTA DE CTS EXISTENTES
                                addFilho(listCasoTeste.get(j).getCasoTeste(), 2);
                                listCasoTeste.get(j).setDuplicado(1);
                                listCTExistente.add(listCasoTeste.get(j));

                            } else {
                                //ADICIONA NA PASTA DE CTS NOVOS
                                addFilho(listCasoTeste.get(j).getCasoTeste(), 1);
                                listCasoTeste.get(j).setDuplicado(0);
                                listCTNovo.add(listCasoTeste.get(j));
                            }

                        }

                        bd.insertCasoTesteImportar(listCasoTeste);
                        

                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "Ocorreu o erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Ocorreu o erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                    } catch (ClassNotFoundException ex) {
                        JOptionPane.showMessageDialog(null, "Ocorreu o erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                    }

                }

                return null;
            }

            @Override
            protected void done() {
                bntImportar.setEnabled(true);
                bntCancelar.setEnabled(true);
                arvoreImportacao.setEnabled(true);
                checkTreeManager.setAtiva(true);
                aguarde.dispose();
                //                janela.setVisible(false);
            }
        };
        worker.execute();


    }//GEN-LAST:event_bntAdicionarPlanilhaActionPerformed

    private void bntImportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntImportarActionPerformed

        // TODO add your handling code here:
        final Frame GUIPrincipal = new MainScreenView();

        SwingWorker worker = new SwingWorker() {
            JDialog aguarde = new WaitScreenView((JFrame) GUIPrincipal, true);

            @Override
            protected Object doInBackground() throws Exception {
                aguarde.setLocationRelativeTo(GUIPrincipal);
                aguarde.setVisible(true);
                try {
                    ManipulaDadosSQLite bd = new ManipulaDadosSQLite();
                    ExtraiPlanilha ep = new ExtraiPlanilha();

                    bntImportar.setEnabled(false);
                    bntCancelar.setEnabled(false);

                    if (jCheckBoxConfiguracao.isSelected()) {
                        ep.extraiConfPlanilha(textPlanilha.getText());
                    }

                    TreePath checkedPaths[] = checkTreeManager.getSelectionModel().getSelectionPaths();

                    for (int i = 0; i < checkedPaths.length; i++) {

                        System.out.println(checkedPaths[i].getLastPathComponent());
                        if (checkedPaths[i].getLastPathComponent().toString().equals("CTs existentes")) {
                            for (int j = 0; j < listCTExistente.size(); j++) {
                                listCTExistente.get(j).setSobrescrever(1);
                                listCTExistente.get(j).setDuplicado(1);
                                bd.updateCasoTesteImportar(listCTExistente.get(i));
                            }

                        } else {
                            if (checkedPaths[i].getLastPathComponent().toString().equals("CTs novos")) {

                                for (int j = 0; j < listCTNovo.size(); j++) {
                                    listCTNovo.get(j).setSobrescrever(1);
                                    listCTNovo.get(j).setDuplicado(0);
                                    bd.updateCasoTesteImportar(listCTNovo.get(j));

                                }

                            } else {
                                if (checkedPaths[i].getLastPathComponent().toString().equals("Importação")) {
                                    for (int j = 0; j < listCasoTeste.size(); j++) {

                                        listCasoTeste.get(j).setSobrescrever(1);
                                        bd.updateCasoTesteImportar(listCasoTeste.get(j));
                                    }
                                } else {
                                    for (int j = 0; j < listCasoTeste.size(); j++) {
                                        if (checkedPaths[i].getLastPathComponent().toString().equals(listCasoTeste.get(j).getCasoTeste())) {
                                            listCasoTeste.get(j).setSobrescrever(1);
                                            bd.updateCasoTesteImportar(listCasoTeste.get(j));
                                        }
                                    }

                                }

                            }
                        }
                    }

                    if (checkedPaths.length == 0 || textPlanilha.getText().equals("") && jCheckBoxConfiguracao.isSelected() == false  ) {
                        JOptionPane.showMessageDialog(null, "Nenhum CT ou planilha foram selecionados", "Importação", JOptionPane.WARNING_MESSAGE);
                    } else {
                        listCasoTeste = bd.getCasoTesteImportar();

                        for (int i = 0; i < listCasoTeste.size(); i++) {
                            if(listCasoTeste.get(i).getDuplicado() == 1){
                                 ep.importaCTExistentePlanilha(textPlanilha.getText(), listCasoTeste.get(i).getCelula(), listCasoTeste.get(i).getCasoTeste());
                            }else{
                                ep.importaCTNovosPlanilha(textPlanilha.getText(), listCasoTeste.get(i).getCelula());
                            }
                            
                            
                        }
                        aguarde.dispose();
                        JOptionPane.showMessageDialog(null, "Importação realizada com sucesso!", "Importação", JOptionPane.INFORMATION_MESSAGE);

                    }

                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Ocorreu o erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                }

                return null;
            }

            @Override
            protected void done() {

                aguarde.dispose();
                bntImportar.setEnabled(false);
                removeAllFilhos();
                textPlanilha.setText("");
                bntCancelar.setEnabled(true);
                arvoreImportacao.setEnabled(false);
                checkTreeManager.setAtiva(false);
            }
        };
        worker.execute();

    }//GEN-LAST:event_bntImportarActionPerformed

    private void bntCancelarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bntCancelarMouseClicked
        this.dispose();
    }//GEN-LAST:event_bntCancelarMouseClicked

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        if (JOptionPane.showConfirmDialog(this, "Deseja realmente sair da tela de importação de Planilha?", "Confirmação", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            dispose();
        }
    }//GEN-LAST:event_formInternalFrameClosing


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntAdicionarPlanilha;
    private javax.swing.JButton bntCancelar;
    private javax.swing.JButton bntImportar;
    private javax.swing.JCheckBox jCheckBoxConfiguracao;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField textPlanilha;
    // End of variables declaration//GEN-END:variables

    public void centralizaJanela(ImportSheetScreenView tela) {
        Dimension d = tela.getSize();
        this.setLocation((d.width - this.getSize().width) / 2, (d.height - this.getSize().height) / 2);
    }

    public void centralizaJanela() {
        Dimension d = this.getDesktopPane().getSize();
        this.setLocation((d.width - this.getSize().width) / 2, (d.height - this.getSize().height) / 2);
    }

    private void criaArvore() {
        noPai = new DefaultMutableTreeNode("Importação");
        DefaultMutableTreeNode ct = new DefaultMutableTreeNode("CTs novos");
        noPai.add(ct);
        DefaultMutableTreeNode ctExistente = new DefaultMutableTreeNode("CTs existentes");
        noPai.add(ctExistente);

        arvoreImportacao = new JTree(noPai);
        jScrollPane2.setViewportView(arvoreImportacao);
        checkTreeManager = new CheckTreeManager(arvoreImportacao);
        repaint();
    }

    private void addFilho(String no) {
        DefaultMutableTreeNode filho = new DefaultMutableTreeNode(no);
        noPai.add(filho);
        arvoreImportacao = new JTree(noPai);
        jScrollPane2.setViewportView(arvoreImportacao);
        checkTreeManager = new CheckTreeManager(arvoreImportacao);
        repaint();

    }

    private void addPai(String no) {
        DefaultMutableTreeNode filho = new DefaultMutableTreeNode(no);
        ((DefaultMutableTreeNode) arvoreImportacao.getPathForRow(2).getLastPathComponent()).add(filho);
        repaint();
    }

    private void addFilho(String no, int posicaoPai) {
        DefaultMutableTreeNode filho = new DefaultMutableTreeNode(no);
        ((DefaultMutableTreeNode) arvoreImportacao.getPathForRow(posicaoPai).getLastPathComponent()).add(filho);
        repaint();
    }

    private void removeAllFilhos() {

        ((DefaultMutableTreeNode) arvoreImportacao.getPathForRow(1).getLastPathComponent()).removeAllChildren();

        arvoreImportacao = new JTree(noPai);
        jScrollPane2.setViewportView(arvoreImportacao);
        checkTreeManager = new CheckTreeManager(arvoreImportacao);
        repaint();

        ((DefaultMutableTreeNode) arvoreImportacao.getPathForRow(2).getLastPathComponent()).removeAllChildren();
        arvoreImportacao = new JTree(noPai);
        jScrollPane2.setViewportView(arvoreImportacao);
        checkTreeManager = new CheckTreeManager(arvoreImportacao);
        repaint();

    }
}
