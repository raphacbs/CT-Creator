/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.accenture.view;

import com.accenture.control.CopiaPlanilha;
import com.accenture.control.ExcelDAO;
import com.accenture.control.ExtraiPlanilha;
import com.accenture.control.ManipulaDadosSQLite;
import com.accenture.bean.CasoTesteTemp;
import com.accenture.bean.Plano;
import com.accenture.util.JanelaAguarde;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;

/**
 *
 * @author raphael.da.silva
 */
public class ExportSheetScreenTIView extends javax.swing.JInternalFrame {

    /**
     * Creates new form GUIExportaPlanilha
     */
    ExcelDAO conf = new ExcelDAO();
    ManipulaDadosSQLite banco = new ManipulaDadosSQLite();
    private int numeroStep = 0;
    private JTextArea textAreaExtracao = new JTextArea();
    private String dirPlanilha = null;

    public ExportSheetScreenTIView() throws IOException, ClassNotFoundException, SQLException {
        initComponents();
        textPlanilhaExportacao.setVisible(false);
        jLabel31.setVisible(false);
        
        new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                // carregando os combobox

                List<String> sistemaMaster = banco.selectConfALL("TB_SISTEMA_MASTER");
                
                //Carrega comboBox sistema master com os dados da tabela
                int tamanhoSistemaMaster = sistemaMaster.size();
                for (int cont = 0; cont < tamanhoSistemaMaster; cont++) {
                    comboSistemaMaster.addItem(sistemaMaster.get(cont));
                }


                return null;
            }

            @Override
            protected void done() {

            }

        }.execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textBuscaPlano = new javax.swing.JTextField();
        bntPesquisar1 = new javax.swing.JButton();
        jLabel33 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        DefaultListModel model =  new DefaultListModel();
        jListPlanosCarregados = new JList(model);
        bntAdicionarLista = new javax.swing.JButton();
        bntRemoverLista = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        DefaultListModel modelExport =  new DefaultListModel();
        jListExportacao = new JList(modelExport);
        bntExportar = new javax.swing.JButton();
        bntExportarNovaPlanilha = new javax.swing.JButton();
        textPlanilhaExportacao = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        checkEmail = new javax.swing.JCheckBox();
        checkAbrirPlanilha = new javax.swing.JCheckBox();
        comboSistemaMaster = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Exportar para Planilha");
        setPreferredSize(new java.awt.Dimension(1200, 650));

        textBuscaPlano.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textBuscaPlanoActionPerformed(evt);
            }
        });
        textBuscaPlano.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textBuscaPlanoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textBuscaPlanoKeyTyped(evt);
            }
        });

        bntPesquisar1.setText("Buscar");
        bntPesquisar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntPesquisar1ActionPerformed(evt);
            }
        });

        jLabel33.setText("CTS reposit√≥rio local:");

        jLabel32.setText("CTs para Exportar:");

        jListPlanosCarregados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListPlanosCarregadosMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(jListPlanosCarregados);

        bntAdicionarLista.setText("Adicionar");
        bntAdicionarLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntAdicionarListaActionPerformed(evt);
            }
        });

        bntRemoverLista.setText("Remover");
        bntRemoverLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntRemoverListaActionPerformed(evt);
            }
        });

        jListExportacao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListExportacaoMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(jListExportacao);

        bntExportar.setText("Exportar para uma planilha existente");
        bntExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntExportarActionPerformed(evt);
            }
        });

        bntExportarNovaPlanilha.setText("Exportar para uma nova planilha");
        bntExportarNovaPlanilha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntExportarNovaPlanilhaActionPerformed(evt);
            }
        });

        textPlanilhaExportacao.setEditable(false);
        textPlanilhaExportacao.setEnabled(false);

        jLabel31.setText("Planilha:");
        jLabel31.setEnabled(false);

        checkEmail.setSelected(true);
        checkEmail.setText("Preparar email?");

        checkAbrirPlanilha.setText("Abrir Planilha gerada?");

        jLabel1.setText("Caso Teste:");

        jLabel2.setText("Sistema:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bntAdicionarLista, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(bntRemoverLista, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel33)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel32)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bntExportar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bntExportarNovaPlanilha, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(493, 493, 493))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(checkAbrirPlanilha)
                            .addComponent(checkEmail, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboSistemaMaster, 0, 237, Short.MAX_VALUE)
                            .addComponent(textBuscaPlano))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntPesquisar1)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel31)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textPlanilhaExportacao, javax.swing.GroupLayout.PREFERRED_SIZE, 623, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(textPlanilhaExportacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel31))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textBuscaPlano, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bntPesquisar1)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(comboSistemaMaster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(bntAdicionarLista)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntRemoverLista))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(checkEmail)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkAbrirPlanilha)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel32)
                            .addComponent(jLabel33))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE))))
                .addGap(9, 9, 9)
                .addComponent(bntExportar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bntExportarNovaPlanilha, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        textAreaExtracao.setEditable(false);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textBuscaPlanoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textBuscaPlanoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textBuscaPlanoActionPerformed

    private void textBuscaPlanoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textBuscaPlanoKeyTyped
        // TODO add your handling code here:
      
    }//GEN-LAST:event_textBuscaPlanoKeyTyped

    private void bntPesquisar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntPesquisar1ActionPerformed
        try {
            // TODO add your handling code here:
            List<Plano> plano = new ArrayList<Plano>();
            List<Plano> planoExportar = new ArrayList<Plano>();
            DefaultListModel model = (DefaultListModel) jListPlanosCarregados.getModel();

            Plano planos = new Plano();
            model.clear();
            String casoTesteTemp = "";
            int posicao = 0;

            if (textBuscaPlano.getText().equals("") || textBuscaPlano.getText() == null) {
                plano = banco.selectPlanoALL();
                for (int i = 0; i < plano.size(); i++) {
                    if (!casoTesteTemp.equals(plano.get(i).getCasoTeste()) && comboSistemaMaster.getSelectedItem().toString().equals(plano.get(i).getSistemaMaster())) {

                        model.add(posicao, plano.get(i).getCasoTeste());
                        planos = plano.get(i);

                        planoExportar.add(posicao, planos);

                        posicao++;
                    }

                    casoTesteTemp = plano.get(i).getCasoTeste();

                }
            } else {
                planos.setCasoTeste(textBuscaPlano.getText());
                plano = banco.selectPorCasoTeste(planos);

                for (int i = 0; i < plano.size(); i++) {
                    if (!casoTesteTemp.equals(plano.get(i).getCasoTeste()) && comboSistemaMaster.getSelectedItem().toString().equals(plano.get(i).getSistemaMaster())) {

                        model.add(posicao, plano.get(i).getCasoTeste());
                        planos = plano.get(i);

                        planoExportar.add(posicao, planos);

                        posicao++;
                    }

                    casoTesteTemp = plano.get(i).getCasoTeste();

                }

            }

            bntAdicionarLista.setEnabled(true);
            bntRemoverLista.setEnabled(true);

            //        ExtraiPlanilha ep = new ExtraiPlanilha();
            //        ep.gravaPlanilha(planoExportar, textPlanilhaExportacao.getText());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu o erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu o erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            //        } catch (IOException ex) {
            //            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            //        } catch (InvalidFormatException ex) {
            //            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bntPesquisar1ActionPerformed

    private void jListPlanosCarregadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListPlanosCarregadosMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            adicionaCasoTesteExportacao();
            bntExportarNovaPlanilha.setEnabled(true);
            bntExportar.setEnabled(true);
        }
    }//GEN-LAST:event_jListPlanosCarregadosMouseClicked

    private void bntAdicionarListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntAdicionarListaActionPerformed
        // TODO add your handling code here:
        //variavel para controle de caso de teste duplicado
        adicionaCasoTesteExportacao();

        bntExportarNovaPlanilha.setEnabled(true);
        bntExportar.setEnabled(true);
    }//GEN-LAST:event_bntAdicionarListaActionPerformed

    private void bntRemoverListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntRemoverListaActionPerformed
        // TODO add your handling code here:

        DefaultListModel modelExport = (DefaultListModel) jListExportacao.getModel();

        //removendo os indeces dos itens selecionados da lista de caso de teste
        int[] indexes = jListExportacao.getSelectedIndices();

        if (indexes.length > 1) {
            int i = 0;
            while (indexes.length != 0) {
                modelExport.remove(indexes[i]);
                indexes = jListExportacao.getSelectedIndices();
                i = indexes.length - 1;

            }

        } else {
            int i = jListExportacao.getSelectedIndex();

            modelExport.remove(i);
        }

        if (modelExport.size() == 0) {
            bntExportarNovaPlanilha.setEnabled(false);
            bntExportar.setEnabled(false);
        }
    }//GEN-LAST:event_bntRemoverListaActionPerformed

    private void jListExportacaoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListExportacaoMouseClicked
        // TODO add your handling code here:
        DefaultListModel modelExport = (DefaultListModel) jListExportacao.getModel();
        if (evt.getClickCount() == 2) {
            int[] indexes = jListExportacao.getSelectedIndices();

            if (indexes.length > 1) {
                int i = 0;
                while (indexes.length != 0) {
                    modelExport.remove(indexes[i]);
                    indexes = jListExportacao.getSelectedIndices();
                    i = indexes.length - 1;

                }

            } else {
                int i = jListExportacao.getSelectedIndex();

                modelExport.remove(i);
            }
        }

        if (modelExport.size() == 0) {
            bntExportarNovaPlanilha.setEnabled(false);
            bntExportar.setEnabled(false);
        }
    }//GEN-LAST:event_jListExportacaoMouseClicked

    private void bntExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntExportarActionPerformed
        // TODO add your handling code here:

        exportaSelecionaArquivoplanilha();
    }//GEN-LAST:event_bntExportarActionPerformed

    private void bntExportarNovaPlanilhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntExportarNovaPlanilhaActionPerformed
        // TODO add your handling code here:

        //cria input para informar o nome da planilha
        JOptionPane nomenclatura = new JOptionPane();
        String nomePlanilha = new String();
        nomePlanilha = null;

        //loop para verificar se o nome da planilha foi preenchido
        while (nomePlanilha == null || nomePlanilha.equals("")) {
            //exibi caixa de texto solicitando a nomenclatura da planilha
            nomePlanilha = nomenclatura.showInputDialog("Informe o nome da planilha", "Cadastro CT - ALM - Equipe - (v0.0)");

            if (nomePlanilha == null || nomePlanilha.equals("")) {
                JOptionPane.showMessageDialog(null, "Deve ser inserido um nome para a planilha", "Erro", JOptionPane.ERROR_MESSAGE);
            } else {

                File origem = new File("C:\\FastPlan\\sheets\\TI.xlsx");

                final File destino = new File(selecionarPlanilha().getPath() + "\\" + nomePlanilha + ".xlsx");

                dirPlanilha = destino.getPath();
                try {

                    CopiaPlanilha copiaPlaninha = new CopiaPlanilha(origem, destino);

                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Ocorreu o seguinte erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                }

                final Frame GUIPrincipal = new MainScreenView();
                new SwingWorker() {
                    JDialog aguarde = new WaitScreenView((JFrame) GUIPrincipal, true);

                    @Override
                    protected Object doInBackground() throws Exception {
                        aguarde.setLocationRelativeTo(GUIPrincipal);
                        aguarde.setVisible(true);
                        //                janela.setModal(true);
                        setAtivacaoBotoesExportar(false);
                        ExtraiPlanilha ep = new ExtraiPlanilha();
                        DefaultListModel modelExport = (DefaultListModel) jListExportacao.getModel();
                        List<CasoTesteTemp> listCasoTesteTemp = new ArrayList<CasoTesteTemp>();
                        List<String> ctExistentePlanilha = new ArrayList<String>();
                        List<CasoTesteTemp> listCasoTesteExpo = new ArrayList<CasoTesteTemp>();
                        CasoTesteTemp ctExpo = new CasoTesteTemp();
                        Plano planoTemp = new Plano();
                        Plano plano = new Plano();
                        List<Plano> listPlano = new ArrayList<Plano>();
                        //array que vai receber as linhas das celulas dos CTs duplicados
                        int[] linhaCelula;
                        //valida se a planilha foi selecionada

                        try {

                            for (int i = 0; i < modelExport.getSize(); i++) {

                                if (i < listCasoTesteTemp.size() && !jListExportacao.getSelectedValue().equals(listCasoTesteTemp.get(i).getCasoTeste())) {
                                    jListExportacao.setSelectedIndex(i);
                                    CasoTesteTemp ctNaoExistente = new CasoTesteTemp();
                                    ctNaoExistente.setCasoTeste(jListExportacao.getSelectedValue().toString());
                                    //                      ctNaoExistente.setCelula(listCasoTesteTemp.get(i).getCelula());
                                    ctNaoExistente.setDuplicado(0);
                                    ctNaoExistente.setSobrescrever(0);

                                    listCasoTesteExpo.add(ctNaoExistente);

                                } else {
                                    jListExportacao.setSelectedIndex(i);
                                    CasoTesteTemp ctNaoExistente = new CasoTesteTemp();
                                    ctNaoExistente.setCasoTeste(jListExportacao.getSelectedValue().toString());
                                    //                      ctNaoExistente.setCelula(listCasoTesteTemp.get(i).getCelula());
                                    ctNaoExistente.setDuplicado(0);
                                    ctNaoExistente.setSobrescrever(0);

                                    listCasoTesteExpo.add(ctNaoExistente);
                                }
                            }
                            //insere os CTs que ser√£o exportados para a planilha
                            banco.insertCasoTesteExportar(listCasoTesteExpo);

                            //recebe os CTs prontos para exportar
                            listCasoTesteTemp = banco.getCasoTesteExportar();

                            for (int i = 0; i < modelExport.getSize(); i++) {
                                jListExportacao.setSelectedIndex(i);
                                ctExpo.setCasoTeste(jListExportacao.getSelectedValue().toString());
                                listCasoTesteExpo.add(i, ctExpo);
                            }

                            for (int contador = 0; contador < listCasoTesteTemp.size(); contador++) {
                                Plano ct = new Plano();
                                ct.setCasoTeste(listCasoTesteTemp.get(contador).getCasoTeste());
                                ct = banco.getPorCasoTeste(ct);
                                listPlano.add(ct);
                            }

                            ep.gravaCTPlanilha(listPlano, destino.getPath(), 7);

                            //limpa campo do diretorio da planilha
//                                textPlanilhaExportacao.setText("");
                            //limpa lista de CTs para exportar
                            modelExport.removeAllElements();
                            //                    janela.setVisible(false);

                            JOptionPane.showMessageDialog(null, "CT(s)exportado(s) com sucesso!", "Exporta√ß√£o Conclu√≠da", JOptionPane.INFORMATION_MESSAGE);
                            banco.deletaTabelaConf("TB_CASO_TESTE_TEMP");

                        } catch (SQLException ex) {

                            JOptionPane.showMessageDialog(null, "Erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                            setAtivacaoBotoesExportar(true);
                        } catch (ClassNotFoundException ex) {
                            JOptionPane.showMessageDialog(null, "Erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                            setAtivacaoBotoesExportar(true);
                        } catch (IOException ex) {
                            JOptionPane.showMessageDialog(null, "Erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                            setAtivacaoBotoesExportar(true);
                        } catch (InvalidFormatException ex) {
                            JOptionPane.showMessageDialog(null, "Erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                            setAtivacaoBotoesExportar(true);
                        } catch (Exception ex) {
                            JOptionPane.showMessageDialog(null, "Erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                            setAtivacaoBotoesExportar(true);
                        }

                        if (checkEmail.isSelected()) {
                            abreJanelaEmail();
                        }
                        if(checkAbrirPlanilha.isSelected()){
                            abrePlanilhaGerada(dirPlanilha);
                        }

                        return null;

                    }

                    @Override
                    protected void done() {
                        bntExportarNovaPlanilha.setEnabled(false);
                        bntExportar.setEnabled(false);
                        aguarde.dispose();

                    }

                }.execute();

            }
        }

    }//GEN-LAST:event_bntExportarNovaPlanilhaActionPerformed

    private void textBuscaPlanoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textBuscaPlanoKeyReleased
          try {
            // TODO add your handling code here:
            List<Plano> plano = new ArrayList<Plano>();
            List<Plano> planoExportar = new ArrayList<Plano>();
            DefaultListModel model = (DefaultListModel) jListPlanosCarregados.getModel();

            Plano planos = new Plano();
            model.clear();
            String casoTesteTemp = "";
            int posicao = 0;

            if (textBuscaPlano.getText().equals("") || textBuscaPlano.getText() == null) {
                plano = banco.selectPlanoALL();
                for (int i = 0; i < plano.size(); i++) {
                    if (!casoTesteTemp.equals(plano.get(i).getCasoTeste()) && comboSistemaMaster.getSelectedItem().toString().equals(plano.get(i).getSistemaMaster())) {

                        model.add(posicao, plano.get(i).getCasoTeste());
                        planos = plano.get(i);

                        planoExportar.add(posicao, planos);

                        posicao++;
                    }

                    casoTesteTemp = plano.get(i).getCasoTeste();

                }
            } else {
                planos.setCasoTeste(textBuscaPlano.getText());
                plano = banco.selectPorCasoTeste(planos);

                for (int i = 0; i < plano.size(); i++) {
                    if (!casoTesteTemp.equals(plano.get(i).getCasoTeste()) && comboSistemaMaster.getSelectedItem().toString().equals(plano.get(i).getSistemaMaster())){

                        model.add(posicao, plano.get(i).getCasoTeste());
                        planos = plano.get(i);

                        planoExportar.add(posicao, planos);

                        posicao++;
                    }

                    casoTesteTemp = plano.get(i).getCasoTeste();

                }

            }

            bntAdicionarLista.setEnabled(true);
            bntRemoverLista.setEnabled(true);

            //        ExtraiPlanilha ep = new ExtraiPlanilha();
            //        ep.gravaPlanilha(planoExportar, textPlanilhaExportacao.getText());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu o erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu o erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_textBuscaPlanoKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntAdicionarLista;
    private javax.swing.JButton bntExportar;
    private javax.swing.JButton bntExportarNovaPlanilha;
    private javax.swing.JButton bntPesquisar1;
    private javax.swing.JButton bntRemoverLista;
    private javax.swing.JCheckBox checkAbrirPlanilha;
    private javax.swing.JCheckBox checkEmail;
    private javax.swing.JComboBox<String> comboSistemaMaster;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JList jListExportacao;
    private javax.swing.JList jListPlanosCarregados;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextField textBuscaPlano;
    private javax.swing.JTextField textPlanilhaExportacao;
    // End of variables declaration//GEN-END:variables
public void centralizaJanela() {
        Dimension d = this.getDesktopPane().getSize();
        this.setLocation((d.width - this.getSize().width) / 2, (d.height - this.getSize().height) / 2);
    }

    public void adicionaCasoTesteExportacao() {
        boolean ctIgual = false;
        List<Plano> plano = new ArrayList<Plano>();
        Plano p = new Plano();
        DefaultListModel model = (DefaultListModel) jListPlanosCarregados.getModel();
        DefaultListModel modelExport = (DefaultListModel) jListExportacao.getModel();
        int i = 0;
        p.setCasoTeste(jListPlanosCarregados.getSelectedValue().toString());
        String temp = null;
        //capturando os indeces dos itens selecionados da lista de caso de teste
        int[] indexes = jListPlanosCarregados.getSelectedIndices();
        //if valida se foi selecionado mais de um CT
        if (indexes.length > 1) {
            //varrendo todos os itens da selecao
            for (int indice = 0; indice < indexes.length; indice++) {
                jListPlanosCarregados.setSelectedIndex(indexes[indice]);
                p.setCasoTeste(jListPlanosCarregados.getSelectedValue().toString());
                int tamanhoExportacao = modelExport.getSize();
                if (tamanhoExportacao >= 1) {
                    for (int contador = 0; contador < tamanhoExportacao; contador++) {
                        jListExportacao.setSelectedIndex(contador);
                        temp = jListPlanosCarregados.getSelectedValue().toString();
                        if (temp.equals(jListExportacao.getSelectedValue().toString())) {
                            ctIgual = true;
                        }
                    }

                    if (ctIgual == false) {

                        i = modelExport.getSize();
                        plano.add(0, p);
                        modelExport.add(modelExport.getSize(), plano.get(0).getCasoTeste());
                    }
                    ctIgual = false;
                } else {
                    i = modelExport.getSize();
                    plano.add(0, p);
                    modelExport.add(modelExport.getSize(), plano.get(0).getCasoTeste());
                    jListExportacao.setSelectedIndex(0);
                }
            }
        }
        //
        int tamanhoExportacao = modelExport.getSize();
        if (tamanhoExportacao >= 1) {
            for (int contador = 0; contador < tamanhoExportacao; contador++) {
                jListExportacao.setSelectedIndex(contador);
                temp = jListPlanosCarregados.getSelectedValue().toString();
                if (temp.equals(jListExportacao.getSelectedValue().toString())) {
                    ctIgual = true;
                }
            }

            if (ctIgual == false) {
                i = modelExport.getSize();
                plano.add(0, p);
                modelExport.add(modelExport.getSize(), plano.get(0).getCasoTeste());
            }
        } else {
            i = modelExport.getSize();
            plano.add(0, p);
            modelExport.add(modelExport.getSize(), plano.get(0).getCasoTeste());
            jListExportacao.setSelectedIndex(0);
        }

    }

    public void exportaSelecionaArquivoplanilha() {
        final Frame GUIPrincipal = new MainScreenView();

        Cursor cursor = Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR);
        this.setCursor(cursor);

        new SwingWorker() {
            JDialog aguarde = new WaitScreenView((JFrame) GUIPrincipal, true);

            @Override
            protected Object doInBackground() throws Exception {
                aguarde.setLocationRelativeTo(GUIPrincipal);
                aguarde.setVisible(true);
                FileFilter extensao = new FileNameExtensionFilter("Planilhas de Carga (*.xlsx)", "xlsx");
                JFileChooser file = new JFileChooser();
                file.setFileSelectionMode(JFileChooser.FILES_ONLY);
                file.setDialogTitle("Selecione a planilha para exportar:");
//                janela.setModal(false);
                file.setFileFilter(extensao);
                file.setAcceptAllFileFilterUsed(false);
                file.setMultiSelectionEnabled(false);
                int i = file.showSaveDialog(null);
//                janela.setVisible(false);

                ExtraiPlanilha ep = new ExtraiPlanilha();
                List<CasoTesteTemp> CTtemp = new ArrayList<CasoTesteTemp>();
                if (i == 1) {
                    JOptionPane.showMessageDialog(null, "Nenhuma Planilha foi selecionada! ", "Exporta√ß√£o de Carga", JOptionPane.INFORMATION_MESSAGE);
                } else {
//                    janela.setVisible(true);
                    setAtivacaoBotoesExportar(false);
                    File arquivo = file.getSelectedFile();
                    ep.setFile(arquivo.getPath());
                    System.out.println(arquivo.getPath());
                    dirPlanilha = arquivo.getPath();
                    textPlanilhaExportacao.setText(arquivo.getPath());
                    try {

                        //Lista recebe lista de CT contidos na planilha
                        CTtemp = ep.getCTExistentes(textPlanilhaExportacao.getText());
                        //salva CTs no banco
                        banco.insertCasoTesteTemp(CTtemp);

                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "Ocorreu o seguinte erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                }

                return null;
            }

            @Override
            protected void done() {

                ExtraiPlanilha ep = new ExtraiPlanilha();
                DefaultListModel modelExport = (DefaultListModel) jListExportacao.getModel();
                List<CasoTesteTemp> listCasoTesteTemp = new ArrayList<CasoTesteTemp>();
                List<String> ctExistentePlanilha = new ArrayList<String>();
                List<CasoTesteTemp> listCasoTesteExpo = new ArrayList<CasoTesteTemp>();
                CasoTesteTemp ctExpo = new CasoTesteTemp();
                Plano planoTemp = new Plano();
                Plano plano = new Plano();
                List<Plano> listPlano = new ArrayList<Plano>();
                //array que vai receber as linhas das celulas dos CTs duplicados
                int[] linhaCelula;
                //valida se a planilha foi selecionada
                if (textPlanilhaExportacao.getText().equals("")) {
                    //exibe mensagem solicitando a sele√ß√£o da planilha
                    JOptionPane.showMessageDialog(null, "Favor selecione a planilha", "Importa√ß√£o", JOptionPane.INFORMATION_MESSAGE);
                    // ep.gravaPlanilha(null, null);

                } else {

                    try {

                        try {
                            //lista recebe lista de CTs contidos na planilha
                            listCasoTesteTemp = banco.getCasoTesteTemp();

                        } catch (SQLException ex) {
                            JOptionPane.showMessageDialog(null, "Erro no Banco de dados: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                        }
                        //linha recebe o tamanho da lista de CTs para exportar
                        linhaCelula = new int[modelExport.getSize()];

                        //primeiro loop que varre o tamanho da lista de CTs para exportacao
                        for (int i = 0; i < modelExport.getSize(); i++) {

                            if (i < listCasoTesteTemp.size() && !jListExportacao.getSelectedValue().equals(listCasoTesteTemp.get(i).getCasoTeste())) {
                                jListExportacao.setSelectedIndex(i);
                                CasoTesteTemp ctNaoExistente = new CasoTesteTemp();
                                ctNaoExistente.setCasoTeste(jListExportacao.getSelectedValue().toString());
//                      ctNaoExistente.setCelula(listCasoTesteTemp.get(i).getCelula());
                                ctNaoExistente.setDuplicado(0);
                                ctNaoExistente.setSobrescrever(0);

                                listCasoTesteExpo.add(ctNaoExistente);

                            } else {
                                jListExportacao.setSelectedIndex(i);
                                CasoTesteTemp ctNaoExistente = new CasoTesteTemp();
                                ctNaoExistente.setCasoTeste(jListExportacao.getSelectedValue().toString());
//                      ctNaoExistente.setCelula(listCasoTesteTemp.get(i).getCelula());
                                ctNaoExistente.setDuplicado(0);
                                ctNaoExistente.setSobrescrever(0);

                                listCasoTesteExpo.add(ctNaoExistente);
                            }

                            //segundo loop que varre o tamanho da lista de CTs contidos na planilha
                            for (int j = 0; j < listCasoTesteTemp.size(); j++) {
                                jListExportacao.setSelectedIndex(i);
                                if (jListExportacao.getSelectedValue().equals(listCasoTesteTemp.get(j).getCasoTeste())) {

//                            listCasoTesteTemp.get(i).setDuplicado(1);
//                            listCasoTesteTemp.get(i).setSobrescrever(0);
//                            ctExistentePlanilha.add(i, listCasoTesteTemp.get(i).getCasoTeste());
                                    CasoTesteTemp ctExistente = new CasoTesteTemp();
                                    ctExistente.setCasoTeste(jListExportacao.getSelectedValue().toString());
                                    ctExistente.setCelula(listCasoTesteTemp.get(j).getCelula());
                                    linhaCelula[i] = listCasoTesteTemp.get(j).getCelula();
                                    ctExistente.setDuplicado(1);
                                    ctExistente.setSobrescrever(0);
                                    ctExistentePlanilha.add(i, listCasoTesteTemp.get(j).getCasoTeste());
//                            listCasoTesteExpo.add(ctExistente);
                                }
                            }
                        }
                        banco.insertCasoTesteExportar(listCasoTesteExpo);
                        //verificar se a lista de CT duplicados cont√©m dados
                        if (!ctExistentePlanilha.isEmpty()) {
                            List<String> ctsDuplicadosNSelecionados = new ArrayList<String>();
                            ctsDuplicadosNSelecionados = ctExistentePlanilha;

                            ctExistentePlanilha = getOpcoesSelecionadas(ctExistentePlanilha);
                            if (ctExistentePlanilha.isEmpty()) {
                                //loop para varrer e setar os CTs que n√£o ser√£o alterados
                                for (int j = 0; j < ctsDuplicadosNSelecionados.size(); j++) {

                                    ctExpo.setCasoTeste(ctsDuplicadosNSelecionados.get(j));
                                    ctExpo.setDuplicado(1);
                                    ctExpo.setSobrescrever(0);
                                    ctExpo.setCelula(linhaCelula[j]);
                                    listCasoTesteExpo.add(j, ctExpo);
                                    banco.updateCasoTesteExportar(listCasoTesteExpo.get(j));

                                }
                            } else {
                                //loop para varrer e setar os CTs que ser√£o alterados
                                for (int j = 0; j < ctExistentePlanilha.size(); j++) {

                                    ctExpo.setCasoTeste(ctExistentePlanilha.get(j));
                                    ctExpo.setDuplicado(1);
                                    ctExpo.setSobrescrever(1);
                                    ctExpo.setCelula(linhaCelula[j]);
                                    listCasoTesteExpo.add(j, ctExpo);
                                    banco.updateCasoTesteExportar(listCasoTesteExpo.get(j));

                                }
                            }
                        }

                        //substitui os cts solicitados pelo usuario
                        listCasoTesteTemp = banco.getCasoTesteExportarSobrescrever();

                        for (int contador = 0; contador < listCasoTesteTemp.size(); contador++) {
                            planoTemp.setCasoTeste(listCasoTesteTemp.get(contador).getCasoTeste());
                            plano = banco.getPorCasoTeste(planoTemp);
                            ep.gravaCTPlanilha(plano, textPlanilhaExportacao.getText().toString(), listCasoTesteTemp.get(contador).getCelula());
                        }

                        //adiciona os novos cts
                        listCasoTesteTemp = banco.getCasoTesteExportar();

                        for (int contador = 0; contador < listCasoTesteTemp.size(); contador++) {
                            Plano ct = new Plano();
                            ct.setCasoTeste(listCasoTesteTemp.get(contador).getCasoTeste());
                            ct = banco.getPorCasoTeste(ct);
                            listPlano.add(ct);
                        }

                        ep.gravaCTPlanilha(listPlano, textPlanilhaExportacao.getText().toString(), banco.getMaiorIdCasoTesteTemp());
                        
                        
                        if (checkEmail.isSelected()) {
                            abreJanelaEmail();
                        }
                        if(checkAbrirPlanilha.isSelected()){
                            abrePlanilhaGerada(dirPlanilha);
                        }
                        //limpa campo do diretorio da planilha
                        textPlanilhaExportacao.setText("");
                        //limpa lista de CTs para exportar
                        modelExport.removeAllElements();
//                        janela.setVisible(false);

                    } catch (SQLException ex) {

                        JOptionPane.showMessageDialog(null, "Erro: " + ex.getMessage() + "Linha 2906", "Erro", JOptionPane.ERROR_MESSAGE);
                    } catch (ClassNotFoundException ex) {
                        JOptionPane.showMessageDialog(null, "Erro: " + ex.getMessage() + "Linha 2908", "Erro", JOptionPane.ERROR_MESSAGE);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "Erro: " + ex.getMessage() + "Linha 2910", "Erro", JOptionPane.ERROR_MESSAGE);
                    } catch (InvalidFormatException ex) {
                        JOptionPane.showMessageDialog(null, "Erro: " + ex.getMessage() + "Linha 2912", "Erro", JOptionPane.ERROR_MESSAGE);
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "Erro: " + ex.getMessage() + "Linha 2914", "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                }
//                janela.setModal(false);
//                janela.setVisible(false);
                JOptionPane.showMessageDialog(null, "CT(s)exportado(s) com sucesso!", "Exporta√ß√£o Conclu√≠da", JOptionPane.INFORMATION_MESSAGE);
                aguarde.dispose();
            }

        }.execute();

        cursor = Cursor.getDefaultCursor();
        this.setCursor(cursor);

    }

    public File selecionarPlanilha() {
        FileFilter extensao = new FileNameExtensionFilter("Planilhas de Carga (*.xlsx)", "xlsx");
        JFileChooser file = new JFileChooser();
        file.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        file.setDialogTitle("Selecione o diret√≥rio:");
        File diretorio = null;

        file.setFileFilter(extensao);
        file.setAcceptAllFileFilterUsed(false);
        file.setMultiSelectionEnabled(false);
        int i = file.showSaveDialog(null);

        if (i == 1) {
            JOptionPane.showMessageDialog(null, "Nenhum diret√≥rio foi selecionado! ", "Exporta√ß√£o de Carga", JOptionPane.INFORMATION_MESSAGE);
        } else {

            diretorio = file.getSelectedFile();

            System.out.println(diretorio.getPath());
        }

        return diretorio;
    }

    private void setAtivacaoBotoesExportar(boolean flag) {
        bntExportarNovaPlanilha.setEnabled(flag);
        bntExportar.setEnabled(flag);
        bntAdicionarLista.setEnabled(flag);
        bntRemoverLista.setEnabled(flag);
    }

    public List<String> getOpcoesSelecionadas(List<String> lista) {
//        String selectedOption = cts;
        List<String> ctLista = new ArrayList<String>();
        String message = "Os CTs abaixo j√° existem na planilha, quais sobrescrever?";
        String[] selectableOptions = new String[]{"Step " + 1, "<<<parametro>>>", "<<<paramentro>>>", "Teste"};
        JFrame f = new JFrame();
        JPanel buttonPanel = new JPanel();
        if (lista.size() / 2 == 0) {
            buttonPanel.setLayout(new GridLayout(lista.size(), 1));
        } else {
            buttonPanel.setLayout(new GridLayout(lista.size(), 1));
        }
        ButtonGroup buttonGroup = new ButtonGroup();
        JRadioButton[] buttons = new JRadioButton[lista.size()];
        JCheckBox[] check = new JCheckBox[lista.size()];

        for (int i = 0; i < lista.size(); i++) {

            check[i] = new JCheckBox(lista.get(i));
//            add(check, i);
            buttonPanel.add(check[i], i);
//            buttonGroup.add(buttons[i]);

        }
//        check.setVisible(true);
        JScrollPane scrollPane = new JScrollPane(buttonPanel);
        scrollPane.setFont(new Font("SansSerif", Font.PLAIN, 8));
        JOptionPane editPane = new JOptionPane(scrollPane);
        editPane.setFont(new Font("SansSerif", Font.PLAIN, 8));
        JDialog dialog = editPane.createDialog(f, message);

        f.pack();
        f.setLocationRelativeTo(null);
        dialog.show();
        for (int i = 0; i < lista.size(); i++) {
            if (check[i].isSelected()) {
                ctLista.add(check[i].getText());
            }
        }
        return ctLista;
    }

    public void abreJanelaEmail() {
        String msg = "Segue%20planilha%20em%20anexo%20favor%20solicitar%20carga%20no%20RC3";
        String assunto = "[PROJETO%20-%20SISTEMA]%20Carga%20no%20RC3";
        geraArquivoTemp(dirPlanilha);
        try {
           
            String arquivo = "c://Fastplan//outlook.vbs";
            Runtime.getRuntime().exec("cmd /c" + arquivo);
            
        } catch (IOException ex) {
            Logger.getLogger(ExportSheetScreenTIView.class.getName()).log(Level.SEVERE, null, ex);
        } 

    }
    
    public void geraArquivoTemp(String dir) {
        FileWriter arq = null;
        try { 
            arq = new FileWriter("c:\\Fastplan\\tempDirPlanilha.txt");
            PrintWriter gravarArq = new PrintWriter(arq);
            gravarArq.printf(dir);
            arq.close();
            
        } catch (IOException ex) {
            Logger.getLogger(ExportSheetScreenTIView.class.getName()).log(Level.SEVERE, null, ex);
       
        }
    
    }
    
    public void abrePlanilhaGerada(String planilha){
        try {
            Desktop desktop = null;
            if (Desktop.isDesktopSupported()) {
                desktop = Desktop.getDesktop();
            }
            desktop.open(new File(planilha));
        } catch (IOException ex) {
            Logger.getLogger(ExportSheetScreenTIView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
