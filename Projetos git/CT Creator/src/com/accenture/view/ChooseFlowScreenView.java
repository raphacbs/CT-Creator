/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.accenture.view;

import com.accenture.bean.ButtonIconBean;
import com.accenture.bean.FlowBean;
import com.accenture.bean.TestCaseTSPropertiesBean;
import com.accenture.ts.rn.FlowRN;
import com.accenture.ts.rn.SvnConnectionRN;
import com.accenture.ts.rn.TestCaseTSRN;
import java.awt.Dimension;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import org.tmatesoft.svn.core.SVNDirEntry;
import org.tmatesoft.svn.core.SVNException;

/**
 *
 * @author Raphael
 */
public class ChooseFlowScreenView extends javax.swing.JDialog {

    /**
     * Creates new form ChooseFlowScreenView
     */
    
    private InstanceScreenTSView instanceScreenTSView;
    
    
    public ChooseFlowScreenView(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public ChooseFlowScreenView( InstanceScreenTSView instanceScreenTSView, java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        new SwingWorker() {

                @Override
                protected Object doInBackground() {
                                      
                    loadComboTS();
                    addIconInButton();
                    
                    
                    
                    return null;
                }

                @Override
                protected void done() {

                }

            }.run();
        setTitle("Selecionar fluxo para adiciona-lo no plano");
        this.instanceScreenTSView = instanceScreenTSView;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        DefaultListModel model =  new DefaultListModel();
        listSelectTestCase =  new JList(model);
        jTextFieldNome = new javax.swing.JTextField();
        jComboBoxSistemas = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        bntSearch = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        fieldTextFlowDescription = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        fieldTextFlowName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        fieldComboboxFlowSystem = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        fieldTextFlowId = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        DefaultListModel modelListTestCases =  new DefaultListModel();
        listTestCases = new JList(modelListTestCases);
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        /*
        listSelectTestCase.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Teste" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        */
        listSelectTestCase.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listSelectTestCase.setToolTipText("");
        listSelectTestCase.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                listSelectTestCaseMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(listSelectTestCase);

        jTextFieldNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNomeActionPerformed(evt);
            }
        });

        jLabel1.setText("Nome:");

        jLabel2.setText("Sistema:");

        bntSearch.setText("Buscar");
        bntSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntSearchActionPerformed(evt);
            }
        });

        jLabel7.setText("Casos de Teste:");
        jLabel7.setEnabled(false);

        jScrollPane2.setEnabled(false);

        fieldTextFlowDescription.setColumns(20);
        fieldTextFlowDescription.setRows(5);
        jScrollPane2.setViewportView(fieldTextFlowDescription);

        jLabel3.setText("Nome:");
        jLabel3.setEnabled(false);

        fieldTextFlowName.setEnabled(false);

        jLabel4.setText("Descrição:");
        jLabel4.setEnabled(false);

        fieldComboboxFlowSystem.setEnabled(false);

        jLabel5.setText("Sistema:");
        jLabel5.setEnabled(false);

        jLabel6.setText("ID:");
        jLabel6.setEnabled(false);

        fieldTextFlowId.setEditable(false);
        fieldTextFlowId.setEnabled(false);

        jScrollPane3.setEnabled(false);

        jScrollPane3.setViewportView(listTestCases);

        jButton1.setText("Adicionar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(14, 14, 14))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxSistemas, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bntSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fieldTextFlowName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldTextFlowId)
                            .addComponent(fieldComboboxFlowSystem, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(308, 308, 308)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBoxSistemas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)))
                            .addComponent(bntSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(fieldTextFlowName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6)
                                .addComponent(fieldTextFlowId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(fieldComboboxFlowSystem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listSelectTestCaseMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listSelectTestCaseMouseReleased
        if (listSelectTestCase.getSelectedIndices().length == 1) {
            loadFielsFlow(listSelectTestCase.getSelectedIndex());

        }
    }//GEN-LAST:event_listSelectTestCaseMouseReleased

    private void jTextFieldNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNomeActionPerformed

    private void bntSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntSearchActionPerformed

        if (listSelectTestCase.getModel().getSize() > 0) {
            DefaultListModel modelFlow = (DefaultListModel) listSelectTestCase.getModel();
            modelFlow.clear();
        }
        cleanFilds();
        loadFlows(jTextFieldNome.getText(), jComboBoxSistemas.getSelectedItem().toString());
    }//GEN-LAST:event_bntSearchActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        sendFlow();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void loadFielsFlow(int i) {
        DefaultListModel modelSelectTestCase = (DefaultListModel) listSelectTestCase.getModel();
        DefaultListModel modelFlow = (DefaultListModel) listTestCases.getModel();
        modelFlow.clear();

        FlowBean fb = (FlowBean) modelSelectTestCase.getElementAt(i);
        fieldTextFlowName.setText(fb.getName());
        fieldComboboxFlowSystem.setSelectedItem(fb.getSystem());
        fieldTextFlowDescription.setText(fb.getDescription());
        fieldTextFlowId.setText(fb.getId());
        for (String testCase : fb.getTestCases()) {
            modelFlow.addElement(testCase);
        }
    }

    private void loadFlows(String name, String system) {
        try {
            FlowRN flowRN = new FlowRN();
            DefaultListModel modelFlow = (DefaultListModel) listSelectTestCase.getModel();
            List<SVNDirEntry> list = flowRN.getEntries();
            List<FlowBean> flowBeans = new ArrayList<FlowBean>();

            for (SVNDirEntry sVNDirEntry : list) {
                flowBeans.add(flowRN.getFile(sVNDirEntry.getName()));
            }

            for (int i = 0; i < flowBeans.size(); i++) {
                if (name.isEmpty() && system.isEmpty()) {
                    modelFlow.addElement(flowBeans.get(i));
                } else if (name.isEmpty()) {
                    if (flowBeans.get(i).getSystem().equalsIgnoreCase(system)) {
                        modelFlow.addElement(flowBeans.get(i));
                    }
                } else if (system.isEmpty()) {
                    if (flowBeans.get(i).getName().contains(name)) {
                        modelFlow.addElement(flowBeans.get(i));
                    }
                } else if (flowBeans.get(i).getName().contains(name) && flowBeans.get(i).getSystem().equalsIgnoreCase(system)) {
                    modelFlow.addElement(flowBeans.get(i));
                }

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void cleanFilds() {

        fieldTextFlowDescription.setText("");
        fieldTextFlowName.setText("");
        fieldTextFlowId.setText("");
        DefaultListModel model = (DefaultListModel) listTestCases.getModel();
        model.clear();
    }

    public void centralizaJanela() {
        Dimension d = getParent().getSize();
        this.setLocation((d.width - this.getSize().width) / 2, (d.height - this.getSize().height) / 2);
    }
    
    private void sendFlow(){
        try{
        List<TestCaseTSPropertiesBean> listTestCaseTSPropertiesBean = new ArrayList<TestCaseTSPropertiesBean>();
        List<TestCaseTSPropertiesBean> tempTestCase = new ArrayList<TestCaseTSPropertiesBean>();
        List<String> cts = new ArrayList<String>();
        
        if(listTestCases.getModel().getSize() > 0){
            for(int i = 0 ; i < listTestCases.getModel().getSize();i++ ){
              String temp = listTestCases.getModel().getElementAt(i);
               if(temp.contains("-")){
                cts.add(temp.substring(0, temp.indexOf("-")));
               }else{
                   cts.add(temp);
               }
            }
            
            SvnConnectionRN svn = new SvnConnectionRN();
            
            
            
            
            for (String ct : cts) {
                tempTestCase = svn.search(fieldComboboxFlowSystem.getSelectedItem().toString(), ct);;
                for (int i = 0; i < tempTestCase.size(); i++) {
                    if(tempTestCase.get(i).getTesteCaseId().equals(ct)){
                        listTestCaseTSPropertiesBean.add(tempTestCase.get(i));
                    }
                }
            }
            
            
            
           
            instanceScreenTSView.loadListFluxo(fieldComboboxFlowSystem.getSelectedItem().toString(), listTestCaseTSPropertiesBean);
            this.dispose();
        }else{
            JOptionPane.showMessageDialog(null, "Selecione um fluxo", "Alerta", JOptionPane.WARNING_MESSAGE);
        }
    }catch(Exception e){
        instanceScreenTSView.addExceptionTextArea(e);
        JOptionPane.showMessageDialog(null, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
    }
    }
    
     private void loadComboTS() {

        try {
            TestCaseTSRN testCaseRN = new TestCaseTSRN();
            ArrayList systems = testCaseRN.systemsTestCase();
            ArrayList fases = testCaseRN.faseCRTestCase();
            ArrayList complexidades = testCaseRN.complexidade();
            jComboBoxSistemas.addItem("");
            for (int i = 0; i < systems.size(); i++) {
                jComboBoxSistemas.addItem(systems.get(i).toString());
                fieldComboboxFlowSystem.addItem(systems.get(i).toString());
            }
            
            
            
        } catch (SVNException ex) {
           ex.printStackTrace();
        } catch (IOException ex) {
             ex.printStackTrace();
        }

    }

    /**
     *
     * @param args
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChooseFlowScreenView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChooseFlowScreenView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChooseFlowScreenView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChooseFlowScreenView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ChooseFlowScreenView dialog = new ChooseFlowScreenView(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    private void addIconInButton() {
        ButtonIconBean iconBean = new ButtonIconBean();
        bntSearch.setIcon(iconBean.getIconBntSearchCt());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntSearch;
    private javax.swing.JComboBox<String> fieldComboboxFlowSystem;
    private javax.swing.JTextArea fieldTextFlowDescription;
    private javax.swing.JTextField fieldTextFlowId;
    private javax.swing.JTextField fieldTextFlowName;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBoxSistemas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextFieldNome;
    private javax.swing.JList<String> listSelectTestCase;
    private javax.swing.JList<String> listTestCases;
    // End of variables declaration//GEN-END:variables
}
