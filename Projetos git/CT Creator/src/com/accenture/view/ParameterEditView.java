/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.accenture.view;

import com.accenture.bean.ButtonIconBean;
import com.accenture.bean.ParameterBean;
import com.accenture.bean.Step;
import com.accenture.control.Validacao;
import com.accenture.ts.dao.TestPlanTSDao;
import com.accenture.ts.rn.ParameterRN;
import com.accenture.util.TextAreaCellEditor;
import com.accenture.util.TextAreaCellRenderer;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author raphael.da.silva
 */
public class ParameterEditView extends javax.swing.JDialog {

    private Validacao parametro;
    private ParameterRN parameterRN;
    private TestPlanTSDao plan;
    private InstanceScreenTSView instance;
    private int lineSelectTableInstance = 0;

    /**
     * Creates new form ParameterEditView
     */
    public ParameterEditView(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        try {
            initComponents();

            parametro = new Validacao();
            parameterRN = new ParameterRN();

//            parameterRN.addParameter("Teste", "123");
//            jLabelCt.setText(parameterRN.getValueParameter("Teste").toString());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }

    }

    public ParameterEditView(InstanceScreenTSView instance, java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        try {
            initComponents();
            addIconInButton();
            parametro = new Validacao();
            parameterRN = new ParameterRN();
            this.instance = instance;
            

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaParametros = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabelCt = new javax.swing.JLabel();
        bntSalvar = new javax.swing.JButton();
        bntCancelar = new javax.swing.JButton();
        jTextFieldCT = new javax.swing.JTextField();
        jTextFieldSystem = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaSteps = new javax.swing.JTable();
        bntPrevious = new javax.swing.JButton();
        bntNext = new javax.swing.JButton();
        jTextFieldNumeroCenario = new javax.swing.JTextField();
        jTextFieldNumeroCt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        labelCtSelecionado = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAreaDescriptionTS = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edição de Parâmetros");

        tabelaParametros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Parâmetro", "Valor", "Aplicar a todos?", "idstep", "id", "idTestCase"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaParametros.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tabelaParametrosKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaParametros);
        if (tabelaParametros.getColumnModel().getColumnCount() > 0) {
            tabelaParametros.getColumnModel().getColumn(1).setCellEditor(new TextAreaCellEditor());
            tabelaParametros.getColumnModel().getColumn(1).setCellRenderer(new TextAreaCellRenderer());
            tabelaParametros.getColumnModel().getColumn(3).setMinWidth(0);
            tabelaParametros.getColumnModel().getColumn(3).setPreferredWidth(0);
            tabelaParametros.getColumnModel().getColumn(3).setMaxWidth(0);
            tabelaParametros.getColumnModel().getColumn(4).setMinWidth(0);
            tabelaParametros.getColumnModel().getColumn(4).setPreferredWidth(0);
            tabelaParametros.getColumnModel().getColumn(4).setMaxWidth(0);
            tabelaParametros.getColumnModel().getColumn(5).setMinWidth(0);
            tabelaParametros.getColumnModel().getColumn(5).setPreferredWidth(0);
            tabelaParametros.getColumnModel().getColumn(5).setMaxWidth(0);
        }
        //addTableListener();

        jLabel1.setText("Nome do CT: ");

        bntSalvar.setText("Salvar");
        bntSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntSalvarActionPerformed(evt);
            }
        });

        bntCancelar.setText("Cancelar");
        bntCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntCancelarActionPerformed(evt);
            }
        });

        jTextFieldCT.setEditable(false);

        jTextFieldSystem.setEditable(false);

        jLabel2.setText("Sistema:");

        tabelaSteps.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Step", "Descrição ", "Resultado esperado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabelaSteps);
        TableColumn col;
        for (int i = 0; i < tabelaSteps.getColumnCount() - 1; i++) {
            col = tabelaSteps.getColumnModel().getColumn(i);
            col.setCellRenderer(new TextAreaCellRenderer());
        }

        bntPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntPreviousActionPerformed(evt);
            }
        });

        bntNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntNextActionPerformed(evt);
            }
        });

        jTextFieldNumeroCenario.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldNumeroCenarioFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldNumeroCenarioFocusLost(evt);
            }
        });
        jTextFieldNumeroCenario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldNumeroCenarioMouseClicked(evt);
            }
        });
        jTextFieldNumeroCenario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldNumeroCenarioKeyTyped(evt);
            }
        });

        jTextFieldNumeroCt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldNumeroCtFocusLost(evt);
            }
        });
        jTextFieldNumeroCt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldNumeroCtMouseClicked(evt);
            }
        });
        jTextFieldNumeroCt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldNumeroCtKeyTyped(evt);
            }
        });

        jLabel3.setText("Nº Cenário:");

        jLabel4.setText("Nº Caso Teste:");

        labelCtSelecionado.setText("Selecionado 0 de 0");

        jTextAreaDescriptionTS.setEditable(false);
        jTextAreaDescriptionTS.setColumns(20);
        jTextAreaDescriptionTS.setRows(5);
        jScrollPane3.setViewportView(jTextAreaDescriptionTS);

        jLabel5.setText("Descrição:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldNumeroCenario, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(bntPrevious, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bntNext, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(labelCtSelecionado)))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(583, 583, 583)
                                        .addComponent(jLabelCt))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldNumeroCt, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldCT, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextFieldSystem, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel5))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(424, 424, 424)
                .addComponent(bntSalvar)
                .addGap(113, 113, 113)
                .addComponent(bntCancelar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelCt))
                    .addComponent(bntPrevious, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bntNext, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelCtSelecionado, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldCT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldSystem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNumeroCt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNumeroCenario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bntSalvar)
                    .addComponent(bntCancelar))
                .addGap(9, 9, 9))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void  refreshLabelQtdCt(){
        int qtdCts = this.plan.getTestPlan().getTestCase().size();
        int select = lineSelectTableInstance + 1; 
        labelCtSelecionado.setText("Selecionado "+select+" de "+ qtdCts);
        
        
    }
    
    
    private void bntSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntSalvarActionPerformed
        saveParameter();
        JOptionPane.showMessageDialog(null, "Edição salva", "Parâmetros", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_bntSalvarActionPerformed

    private void tabelaParametrosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabelaParametrosKeyReleased

        tabelaParametros.getColumnModel().getColumn(1).setCellRenderer(new TextAreaCellRenderer());

    }//GEN-LAST:event_tabelaParametrosKeyReleased

    private void bntCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_bntCancelarActionPerformed

    private void bntPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntPreviousActionPerformed
        DefaultTableModel model = (DefaultTableModel) tabelaParametros.getModel();
        bntNext.setEnabled(true);
        if (lineSelectTableInstance != 0) {
           // saveParameter();
            saveParameterDB(lineSelectTableInstance);
            while (model.getRowCount() > 0) {
                model.removeRow(0);
            }
            lineSelectTableInstance = lineSelectTableInstance - 1;
            //loadParameterTable(this.plan, lineSelectTableInstance);
             loadParameterTableDB(this.plan, lineSelectTableInstance);
        } else {
            bntPrevious.setEnabled(false);
        }
        instance.selectLineTableInstance(lineSelectTableInstance);
    }//GEN-LAST:event_bntPreviousActionPerformed

    private void bntNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntNextActionPerformed
        DefaultTableModel model = (DefaultTableModel) tabelaParametros.getModel();
        bntPrevious.setEnabled(true);
        if (lineSelectTableInstance != this.plan.getTestPlan().getTestCase().size() - 1) {
//            saveParameter();
            saveParameterDB(lineSelectTableInstance);
            while (model.getRowCount() > 0) {
                model.removeRow(0);
            }
            lineSelectTableInstance = lineSelectTableInstance + 1;
//            loadParameterTable(this.plan, lineSelectTableInstance);
             loadParameterTableDB(this.plan, lineSelectTableInstance);
        } else {
            bntNext.setEnabled(false);
        }
        instance.selectLineTableInstance(lineSelectTableInstance);
    }//GEN-LAST:event_bntNextActionPerformed

    private void jTextFieldNumeroCenarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNumeroCenarioKeyTyped
        String caracteres = "0987654321";// lista de caracters que não devem ser aceitos
        if (caracteres.contains(evt.getKeyChar() + "")) {// se o caracter que gerou o evento estiver não estiver na lista

        } else {
            evt.consume();//aciona esse propriedade para eliminar a ação do evento   
        }

    }//GEN-LAST:event_jTextFieldNumeroCenarioKeyTyped

    private void jTextFieldNumeroCtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNumeroCtKeyTyped
        String caracteres = "0987654321";// lista de caracters que não devem ser aceitos
        if (caracteres.contains(evt.getKeyChar() + "")) {// se o caracter que gerou o evento estiver não estiver na lista

        } else {
            evt.consume();//aciona esse propriedade para eliminar a ação do evento   
        }
    }//GEN-LAST:event_jTextFieldNumeroCtKeyTyped

    private void jTextFieldNumeroCenarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldNumeroCenarioMouseClicked
        jTextFieldNumeroCenario.selectAll();
    }//GEN-LAST:event_jTextFieldNumeroCenarioMouseClicked

    private void jTextFieldNumeroCtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldNumeroCtMouseClicked
        jTextFieldNumeroCt.selectAll();
    }//GEN-LAST:event_jTextFieldNumeroCtMouseClicked

    private void jTextFieldNumeroCtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldNumeroCtFocusLost
        //CR 15112 - INICIO
        if(jTextFieldCT.getText().length()<2)
        jTextFieldCT.setText("0"+jTextFieldCT.getText());
        //CR 15112 - FIM
    }//GEN-LAST:event_jTextFieldNumeroCtFocusLost

    private void jTextFieldNumeroCenarioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldNumeroCenarioFocusLost
        //CR 15112 - INICIO
        if(jTextFieldNumeroCenario.getText().length()<2)
        jTextFieldNumeroCenario.setText("0"+jTextFieldNumeroCenario.getText());
        //CR 15112 - FIM
    }//GEN-LAST:event_jTextFieldNumeroCenarioFocusLost

    private void jTextFieldNumeroCenarioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldNumeroCenarioFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNumeroCenarioFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ParameterEditView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ParameterEditView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ParameterEditView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ParameterEditView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ParameterEditView dialog = new ParameterEditView(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntCancelar;
    private javax.swing.JButton bntNext;
    private javax.swing.JButton bntPrevious;
    private javax.swing.JButton bntSalvar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelCt;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextAreaDescriptionTS;
    private javax.swing.JTextField jTextFieldCT;
    private javax.swing.JTextField jTextFieldNumeroCenario;
    private javax.swing.JTextField jTextFieldNumeroCt;
    private javax.swing.JTextField jTextFieldSystem;
    private javax.swing.JLabel labelCtSelecionado;
    private javax.swing.JTable tabelaParametros;
    private javax.swing.JTable tabelaSteps;
    // End of variables declaration//GEN-END:variables

    public void addParameterTable(TestPlanTSDao plan, int lineSelect) {
        this.plan = plan;
        lineSelectTableInstance = lineSelect;
        List<ParameterBean> parameters = new ArrayList<ParameterBean>();
        DefaultTableModel modelStep = (DefaultTableModel) tabelaSteps.getModel();
        List<String> listDescriptionStep = parameterRN.searchParameters(plan.getTestPlan().getTestCase().get(lineSelect).getStepDescription());
        List<String> listExpectedResults = parameterRN.searchParameters(plan.getTestPlan().getTestCase().get(lineSelect).getExpectedResults());
        DefaultTableModel model = (DefaultTableModel) tabelaParametros.getModel();
        String nameTemp = "";
        jTextFieldCT.setText(plan.getTestPlan().getTestCase().get(lineSelect).getTestScriptName());
        jTextFieldSystem.setText(plan.getTestPlan().getTestCase().get(lineSelect).getProduct());
        jTextFieldNumeroCenario.setText(plan.getTestPlan().getTestCase().get(lineSelect).getNumeroCenario() + "");
        jTextFieldCT.setText(plan.getTestPlan().getTestCase().get(lineSelect).getNumeroCt() + "");

        for (int i = 0; i < listDescriptionStep.size(); i++) {
            ParameterRN parameterRN = new ParameterRN();
            if (!listDescriptionStep.get(i).equals(nameTemp)) {
                model.addRow(new String[]{listDescriptionStep.get(i), ""});
                model.setValueAt(false, model.getRowCount() - 1, 2);
                parameterRN.addParameter(listDescriptionStep.get(i), "", false);
                nameTemp = listDescriptionStep.get(i);
                parameters.add(parameterRN.getParameter());
            }
        }

        for (int i = 0; i < listExpectedResults.size(); i++) {
            for (int j = 0; j < tabelaParametros.getRowCount(); j++) {
                ParameterRN parameterRN = new ParameterRN();
                if (!listExpectedResults.get(i).equals(nameTemp) && !listExpectedResults.get(i).equals(tabelaParametros.getValueAt(j, 0))) {
                    model.addRow(new String[]{listExpectedResults.get(i), ""});
                    model.setValueAt(false, model.getRowCount() - 1, 2);
                    parameterRN.addParameter(listExpectedResults.get(i), "", false);
                    nameTemp = listExpectedResults.get(i);
                    parameters.add(parameterRN.getParameter());
                }
            }
        }

        this.plan.getTestPlan().getTestCase().get(lineSelect).setParameters(parameters);

        //apaga linhas da tabela steps
        while (modelStep.getRowCount() > 0) {
            modelStep.removeRow(0);
        }
        for (int i = 0; i < this.plan.getTestPlan().getTestCase().get(lineSelect).getListStep().size(); i++) {
            modelStep.addRow(new String[]{"Step " + 1, this.plan.getTestPlan().getTestCase().get(lineSelect).getListStep().get(i).getDescStep(), this.plan.getTestPlan().getTestCase().get(lineSelect).getListStep().get(i).getResultadoStep()});
            System.out.print(modelStep.getValueAt(i, 1));
        }
        int numeroStep = 0;
        //ordena a numeração dos steps
        int numLinhas = modelStep.getRowCount();
        for (int j = 0; j < numLinhas; j++) {
            numeroStep = j + 1;
            modelStep.setValueAt("Step " + numeroStep, j, 0);
        }

        instance.setPlanInstance(plan);

    }

    public void loadParameterTable(TestPlanTSDao plan, int lineSelect) {
        this.plan = plan;
        lineSelectTableInstance = lineSelect;
        List<ParameterBean> parameters = new ArrayList<ParameterBean>();
        DefaultTableModel modelStep = (DefaultTableModel) tabelaSteps.getModel();
        DefaultTableModel model = (DefaultTableModel) tabelaParametros.getModel();
        String nameTemp = "";
        jTextFieldCT.setText(plan.getTestPlan().getTestCase().get(lineSelect).getTestScriptName());
        jTextFieldSystem.setText(plan.getTestPlan().getTestCase().get(lineSelect).getProduct());
        jTextFieldNumeroCenario.setText(plan.getTestPlan().getTestCase().get(lineSelect).getNumeroCenario() + "");
        jTextFieldNumeroCt.setText(plan.getTestPlan().getTestCase().get(lineSelect).getNumeroCt() + "");
        jTextAreaDescriptionTS.setText(plan.getTestPlan().getTestCase().get(lineSelect).getTestScriptDescription());

        for (int i = 0; i < this.plan.getTestPlan().getTestCase().get(lineSelect).getParameters().size(); i++) {
            model.addRow(new String[]{this.plan.getTestPlan().getTestCase().get(lineSelect).getParameters().get(i).getParameterName(), this.plan.getTestPlan().getTestCase().get(lineSelect).getParameters().get(i).getParameterValue()});
            model.setValueAt(this.plan.getTestPlan().getTestCase().get(lineSelect).getParameters().get(i).isApllyToAll(), i, 2);
            
        }

        //apaga linhas da tabela steps
        while (modelStep.getRowCount() > 0) {
            modelStep.removeRow(0);
        }
        for (int i = 0; i < this.plan.getTestPlan().getTestCase().get(lineSelect).getListStep().size(); i++) {
            modelStep.addRow(new String[]{"Step " + 1, this.plan.getTestPlan().getTestCase().get(lineSelect).getListStep().get(i).getDescStep(), this.plan.getTestPlan().getTestCase().get(lineSelect).getListStep().get(i).getResultadoStep()});
            System.out.print(modelStep.getValueAt(i, 1));
        }
        int numeroStep = 0;
        //ordena a numeração dos steps
        int numLinhas = modelStep.getRowCount();
        for (int j = 0; j < numLinhas; j++) {
            numeroStep = j + 1;
            modelStep.setValueAt("Step " + numeroStep, j, 0);
        }
        
        refreshLabelQtdCt();

    }
    
    public void loadParameterTableDB(TestPlanTSDao plan, int lineSelect) {
        this.plan = plan;
        lineSelectTableInstance = lineSelect;
        
        DefaultTableModel modelStep = (DefaultTableModel) tabelaSteps.getModel();
        DefaultTableModel model = (DefaultTableModel) tabelaParametros.getModel();
        String nameTemp = "";
        jTextFieldCT.setText(plan.getTestPlan().getTestCase().get(lineSelect).getTestScriptName());
        jTextFieldSystem.setText(plan.getTestPlan().getTestCase().get(lineSelect).getProduct());
        jTextFieldNumeroCenario.setText(plan.getTestPlan().getTestCase().get(lineSelect).getNumeroCenario() + "");
        jTextFieldNumeroCt.setText(plan.getTestPlan().getTestCase().get(lineSelect).getNumeroCt() + "");
        jTextAreaDescriptionTS.setText(plan.getTestPlan().getTestCase().get(lineSelect).getTestScriptDescription());
        
//        List<ParameterBean> parameters = new ArrayList<>();
//        this.plan.getTestPlan().getTestCase().get(lineSelect).getListStep().stream().forEach(s->{parameters.addAll(s.getParameters());});
        
        
      
        for (int i = 0; i < this.plan.getTestPlan().getTestCase().get(lineSelectTableInstance).getParameters().size(); i++) {
            model.addRow(new String[]{this.plan.getTestPlan().getTestCase().get(lineSelectTableInstance).getParameters().get(i).getParameterName(), this.plan.getListTc().get(lineSelectTableInstance).getParameters().get(i).getParameterValue()});
            model.setValueAt(this.plan.getTestPlan().getTestCase().get(lineSelectTableInstance).getParameters().get(i).isApllyToAll(), i, 2);
            model.setValueAt(this.plan.getTestPlan().getTestCase().get(lineSelectTableInstance).getParameters().get(i).getIdStep(), i, 3);
            model.setValueAt(this.plan.getTestPlan().getTestCase().get(lineSelectTableInstance).getParameters().get(i).getId(), i, 4);
        }

        //apaga linhas da tabela steps
        while (modelStep.getRowCount() > 0) {
            modelStep.removeRow(0);
        }
        for (int i = 0; i < this.plan.getTestPlan().getTestCase().get(lineSelect).getListStep().size(); i++) {
            modelStep.addRow(new String[]{"Step " + 1, this.plan.getTestPlan().getTestCase().get(lineSelect).getListStep().get(i).getDescStep(), this.plan.getTestPlan().getTestCase().get(lineSelect).getListStep().get(i).getResultadoStep()});
            System.out.print(modelStep.getValueAt(i, 1));
        }
        int numeroStep = 0;
        //ordena a numeração dos steps
        int numLinhas = modelStep.getRowCount();
        for (int j = 0; j < numLinhas; j++) {
            numeroStep = j + 1;
            modelStep.setValueAt("Step " + numeroStep, j, 0);
        }
        
        refreshLabelQtdCt();

    }

    public void saveParameter() {
        tabelaParametros.editingStopped(new ChangeEvent(tabelaParametros));
        List<ParameterBean> listP = new ArrayList<ParameterBean>();
        String nameParameter = "";
        for (int i = 0; i < tabelaParametros.getRowCount(); i++) {
            ParameterBean p = new ParameterBean();
            p.setParameterName(tabelaParametros.getValueAt(i, 0).toString());
            p.setParameterValue(tabelaParametros.getValueAt(i, 1).toString());
//            p.setApllyToAll(Boolean.parseBoolean(tabelaParametros.getValueAt(i, 2).toString()));
            p.setApllyToAll(false);

            if (Boolean.parseBoolean(tabelaParametros.getValueAt(i, 2).toString())) {
                DefaultTableModel model = (DefaultTableModel) tabelaParametros.getModel();
                model.setValueAt(false, i, 2);                
                tabelaParametros.setValueAt(false, i, 2);
                nameParameter = tabelaParametros.getValueAt(i, 0).toString();

                for (int cont = 0; cont < this.plan.getTestPlan().getTestCase().size(); cont++) {
                    if (this.plan.getTestPlan().getTestCase().get(cont).getTestScriptName().equals(jTextFieldCT.getText())) {
                        for (int contP = 0; contP < this.plan.getTestPlan().getTestCase().get(cont).getParameters().size(); contP++) {
                            if (this.plan.getTestPlan().getTestCase().get(cont).getParameters().get(contP).getParameterName().equals(nameParameter)) {
                                this.plan.getTestPlan().getTestCase().get(cont).getParameters().get(contP).setParameterValue(tabelaParametros.getValueAt(i, 1).toString());
                                //linha comentada pois nã estava sendo possível alterar os parâmetros após marcação do checkbox
//                                this.plan.getTestPlan().getTestCase().get(cont).getParameters().get(contP).setApllyToAll(Boolean.parseBoolean(tabelaParametros.getValueAt(i, 2).toString()));

                            }
                        }
                    }
                }

            }

            listP.add(p);
        }
        //CR 15112- Inicio
        if (jTextFieldNumeroCenario.getText().length() < 2) {
            jTextFieldNumeroCenario.setText("0" + jTextFieldNumeroCenario.getText());
        }

        if (jTextFieldNumeroCt.getText().length() < 2) {
            jTextFieldNumeroCt.setText("0" + jTextFieldNumeroCt.getText());
        }
        //CR 15112- fim
        this.plan.getTestPlan().getTestCase().get(lineSelectTableInstance).setParameters(listP);
        this.plan.getTestPlan().getTestCase().get(lineSelectTableInstance).setNumeroCenario(jTextFieldNumeroCenario.getText());
        this.plan.getTestPlan().getTestCase().get(lineSelectTableInstance).setNumeroCt(jTextFieldNumeroCt.getText());
        instance.setPlanInstance(this.plan);

        instance.upddateTableInstance();
    }
    
     public void saveParameterDB(int row) {
        tabelaParametros.editingStopped(new ChangeEvent(tabelaParametros));
        int idCT =  this.plan.getTestPlan().getTestCase().get(lineSelectTableInstance).getId();
        for(int i = 0 ; i < tabelaParametros.getRowCount(); i++){
            boolean aplly = (boolean) tabelaParametros.getValueAt(i, 2);
            String value = (String) tabelaParametros.getValueAt(i, 1);
            String name = (String) tabelaParametros.getValueAt(i, 0);
            
             for(int j = 0; j< this.plan.getTestPlan().getTestCase().get(lineSelectTableInstance).getListStep().size(); j++){
                 
                   List<ParameterBean> ps =   this.plan.getTestPlan().getTestCase().get(lineSelectTableInstance).getListStep().get(j).getParameters().stream().filter(pb->pb.getParameterName().contains(name)).collect(Collectors.toList());
                   ps.stream().forEach(param-> param.setParameterValue(value));
             }
        }
        

           
        
//        for(int i = 0; i< this.plan.getTestPlan().getTestCase().get(lineSelectTableInstance).getListStep().size(); i++){
//            int idstep = (int) tabelaParametros.getValueAt(0, 3);
//            if(idstep == this.plan.getTestPlan().getTestCase().get(lineSelectTableInstance).getListStep().get(i).getId()){
//                for(int j = 0 ; j < this.plan.getTestPlan().getTestCase().get(lineSelectTableInstance).getListStep().get(i).getParameters().size(); j++){
//                    String name = (String) tabelaParametros.getValueAt(j, 0);
//                    if(name.equals(this.plan.getTestPlan().getTestCase().get(lineSelectTableInstance).getListStep().get(i).getParameters().get(j).getParameterName()) ){
//                        boolean aplly = (boolean) tabelaParametros.getValueAt(j, 2);
//                        String value = (String) tabelaParametros.getValueAt(j, 1);
//                        this.plan.getTestPlan().getTestCase().get(lineSelectTableInstance).getListStep().get(i).getParameters().get(j).setApllyToAll(aplly);
//                        this.plan.getTestPlan().getTestCase().get(lineSelectTableInstance).getListStep().get(i).getParameters().get(j).setParameterValue(value);
//                        if(!aplly){
//                            break;
//                        }
//                    }
//                }
//                break;
//            }
//        }

        instance.upddateTableInstance();
    }
    
    

    public void centralizaJanelaDialogo() {
        Toolkit tk = Toolkit.getDefaultToolkit();
        Dimension d = tk.getScreenSize();
        this.setLocation((d.width - this.getSize().width) / 2, (d.height - this.getSize().height) / 2);
    }

    public void renderTableStep() {
        TableColumn col;
        for (int i = 0; i < tabelaSteps.getColumnCount() - 1; i++) {
            col = tabelaSteps.getColumnModel().getColumn(i);
            col.setCellRenderer(new TextAreaCellRenderer());
        }
    }

    public void addIconInButton() {
        ButtonIconBean iconBean = new ButtonIconBean();
        bntPrevious.setIcon(iconBean.getIconPrevious());
        bntNext.setIcon(iconBean.getIconNext());
        bntSalvar.setIcon(iconBean.getIconBntConfirmAction());
        bntCancelar.setIcon(iconBean.getIconBntCacelAction());
    }

    private void addTableListener() {
        DefaultTableModel model = (DefaultTableModel) tabelaParametros.getModel();
        model.addTableModelListener(new TableModelListener() {

            @Override
            public void tableChanged(TableModelEvent tme) {
                if (tme.getType() == TableModelEvent.UPDATE) {
                    saveParameter();

                }
            }
        });
    }

}
