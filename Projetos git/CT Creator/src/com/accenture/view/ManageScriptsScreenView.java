/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.accenture.view;

import com.accenture.bean.ButtonIconBean;

import com.accenture.bean.ScriptBean;

import javax.swing.DefaultListModel;

import com.accenture.ts.rn.ScriptRN;
import com.accenture.ts.rn.TestCaseTSRN;
import com.accenture.util.ProjectSettings;
import java.awt.Dimension;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import org.tmatesoft.svn.core.SVNDirEntry;
import org.tmatesoft.svn.core.SVNException;
import com.accenture.util.FunctiosDates;
import java.awt.Cursor;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Collections;

/**
 *
 * @author raphael.da.silva
 */
public class ManageScriptsScreenView extends javax.swing.JInternalFrame {

    //variaveis locais
    private boolean editing = false;

    /**
     * Creates new form ManageflowsScreenView
     */
    public ManageScriptsScreenView() throws IOException, SVNException {
        initComponents();

        new SwingWorker() {

            @Override
            protected Object doInBackground() {

                loadComboTS();
                setEnableComponents(false);
                addIconInButton();

                return null;
            }

            @Override
            protected void done() {

            }

        }.run();

    }

    public ManageScriptsScreenView(List<String> Cts) {
        addScript(Cts);
    }

    private void carregaScript(String system) {
        try {
            labelQtdFluxos.setText("Total de scripts:  " + 0);

            DefaultListModel modelFlow = (DefaultListModel) listSelectScript.getModel();
            List<SVNDirEntry> list = ScriptRN.getInstance().getEntries(system);
            List<ScriptBean> scripts = new ArrayList<ScriptBean>();
            refreshLabelStatus("Aguarde, atualizando lista de scripts...");

            scripts = ScriptRN.getInstance().getScripts(list, system);

            Collections.sort(scripts);

            for (int i = 0; i < scripts.size(); i++) {
                if (jTextFieldNome.getText().isEmpty()) {
                    modelFlow.addElement(scripts.get(i));
                    refreshLabelStatus("Carregando: " + scripts.get(i).getNameScript());
                } else if (scripts.get(i).getNameScript().contains(jTextFieldNome.getText())) {
                    modelFlow.addElement(scripts.get(i));
                    refreshLabelStatus("Carregando: " + scripts.get(i).getNameScript());
                }
            }

            listSelectScript.repaint();
            labelQtdFluxos.setText("Total de fluxos:  " + modelFlow.size());
            refreshLabelStatus("Lista de scripts carregada.");

        } catch (Exception ex) {
            addLogTextArea(ex);
            Logger.getLogger(ManageScriptsScreenView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao desconhecido, \nverifique mais detalhes no botão de log.", "Erro", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

    private void loadComboTS() {

        try {
            TestCaseTSRN testCaseRN = new TestCaseTSRN();
            ArrayList systems = testCaseRN.systemsTestCase();
            ArrayList fases = testCaseRN.faseCRTestCase();
            ArrayList complexidades = testCaseRN.complexidade();
            jComboBoxSistemas.addItem("");
            for (int i = 0; i < systems.size(); i++) {
                jComboBoxSistemas.addItem(systems.get(i).toString());
                fieldComboboxSystem.addItem(systems.get(i).toString());
            }

        } catch (SVNException ex) {
            addLogTextArea(ex);
        } catch (IOException ex) {
            addLogTextArea(ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        dialogLog = new javax.swing.JDialog();
        jScrollPane5 = new javax.swing.JScrollPane();
        statusTextArea = new javax.swing.JTextArea();
        bntLimpar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        DefaultListModel model =  new DefaultListModel();
        listSelectScript =  new JList(model);
        jTextFieldNome = new javax.swing.JTextField();
        jComboBoxSistemas = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        bntSearch = new javax.swing.JButton();
        bntEditOrCancel = new javax.swing.JButton();
        bntNew = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        fieldTextName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        fieldComboboxSystem = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        fieldTextFlowId = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        DefaultListModel modelListTestCases =  new DefaultListModel();
        listScripts = new JList(modelListTestCases);
        jLabel7 = new javax.swing.JLabel();
        bntDelete = new javax.swing.JButton();
        bntSubir = new javax.swing.JButton();
        bntDesce = new javax.swing.JButton();
        bntAdd = new javax.swing.JButton();
        bntExcluir = new javax.swing.JButton();
        bntSave = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        fieldTextDescription = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        labelQtdCts = new javax.swing.JLabel();
        labelStatus = new javax.swing.JLabel();
        labelQtdFluxos = new javax.swing.JLabel();

        jMenuItem1.setText("Teste");
        jPopupMenu1.add(jMenuItem1);

        dialogLog.setTitle("Log");
        dialogLog.setSize(new java.awt.Dimension(400, 600));
        dialogLog.setType(java.awt.Window.Type.POPUP);

        statusTextArea.setEditable(false);
        statusTextArea.setColumns(20);
        statusTextArea.setFont(new java.awt.Font("Consolas", 0, 13)); // NOI18N
        statusTextArea.setForeground(new java.awt.Color(255, 0, 51));
        statusTextArea.setRows(5);
        jScrollPane5.setViewportView(statusTextArea);

        bntLimpar.setText("Limpar");
        bntLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntLimparActionPerformed(evt);
            }
        });
        bntLimpar.setEnabled(true);
        bntLimpar.setVisible(true);

        javax.swing.GroupLayout dialogLogLayout = new javax.swing.GroupLayout(dialogLog.getContentPane());
        dialogLog.getContentPane().setLayout(dialogLogLayout);
        dialogLogLayout.setHorizontalGroup(
            dialogLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
            .addGroup(dialogLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(dialogLogLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(bntLimpar)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        dialogLogLayout.setVerticalGroup(
            dialogLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
            .addGroup(dialogLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(dialogLogLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(bntLimpar)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setForeground(java.awt.Color.black);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Scripts (Cenários Automação)");
        setToolTipText("Tela de manutenção de componentes");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        /*
        listSelectScript.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Teste" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        */
        listSelectScript.setToolTipText("");
        listSelectScript.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                listSelectScriptMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(listSelectScript);
        listSelectScript.add(jPopupMenu1);

        jTextFieldNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNomeActionPerformed(evt);
            }
        });

        jLabel1.setText("Nome:");

        jLabel2.setText("Sistema:");

        bntSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntSearchActionPerformed(evt);
            }
        });

        bntEditOrCancel.setText("Editar");
        bntEditOrCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntEditOrCancelActionPerformed(evt);
            }
        });

        bntNew.setText("Novo");
        bntNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntNewActionPerformed(evt);
            }
        });

        jLabel3.setText("Nome:");

        jLabel4.setText("Descrição:");

        jLabel5.setText("Sistema:");

        jLabel6.setText("ID:");

        fieldTextFlowId.setEditable(false);

        jScrollPane3.setViewportView(listScripts);

        jLabel7.setText("Componentes:");

        bntDelete.setText("Excluir");
        bntDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntDeleteActionPerformed(evt);
            }
        });

        bntSubir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntSubirActionPerformed(evt);
            }
        });

        bntDesce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntDesceActionPerformed(evt);
            }
        });

        bntAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntAddActionPerformed(evt);
            }
        });

        bntExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntExcluirActionPerformed(evt);
            }
        });

        bntSave.setText("Salvar");
        bntSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntSaveActionPerformed(evt);
            }
        });

        fieldTextDescription.setColumns(20);
        fieldTextDescription.setRows(5);
        jScrollPane2.setViewportView(fieldTextDescription);

        jButton1.setText("LOG");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        labelQtdCts.setText("Total de Scripts:");

        labelStatus.setText("Status:");

        labelQtdFluxos.setText("Total de componentes:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(14, 14, 14))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBoxSistemas, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(bntSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(labelQtdFluxos, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fieldTextName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldTextFlowId)
                            .addComponent(fieldComboboxSystem, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelStatus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(labelQtdCts, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bntExcluir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bntAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bntDesce, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bntSubir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bntNew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bntSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bntEditOrCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBoxSistemas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)))
                            .addComponent(bntSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelQtdFluxos))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(fieldTextName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6)
                                .addComponent(fieldTextFlowId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(fieldComboboxSystem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(labelQtdCts))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bntSubir, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bntDesce, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bntAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bntExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bntNew)
                            .addComponent(bntEditOrCancel)
                            .addComponent(bntDelete)
                            .addComponent(bntSave)
                            .addComponent(jButton1))
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNomeActionPerformed

    private void bntSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntSearchActionPerformed
//        new SwingWorker() {
//
//            @Override
//            protected Object doInBackground() throws Exception {
        if (!jComboBoxSistemas.getSelectedItem().toString().isEmpty()) {
            refreshLabelStatus("Aguarde, atualizando lista de scripts...");
            getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            if (listSelectScript.getModel().getSize() > 0) {
                DefaultListModel modelFlow = (DefaultListModel) listSelectScript.getModel();
                modelFlow.clear();
            }
            cleanFilds();

            carregaScript(jComboBoxSistemas.getSelectedItem().toString());
            listSelectScript.repaint();
            getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        } else {
            JOptionPane.showMessageDialog(null, "Favor selecionar um sistema, para refinar a busca", "Componente", JOptionPane.WARNING_MESSAGE);
        }
//                return null;
//            }
//
//            @Override
//            protected void done() {
//                listSelectTestCase.repaint();
//                getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
//            }
//
//        }.execute();


    }//GEN-LAST:event_bntSearchActionPerformed

    private void listSelectScriptMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listSelectScriptMouseReleased
        if (listSelectScript.getSelectedIndices().length == 1) {
            carregaCampos(listSelectScript.getSelectedIndex());
            bntDelete.setEnabled(true);
            bntEditOrCancel.setEnabled(true);

        } else {
            cleanFilds();
            bntDelete.setEnabled(true);
        }
        refreshQTDCTs();
    }//GEN-LAST:event_listSelectScriptMouseReleased

    private void bntEditOrCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntEditOrCancelActionPerformed
        new SwingWorker() {

            @Override
            protected Object doInBackground() throws Exception {
                getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

                if (listSelectScript.getSelectedValue() != null) {
                    if (listSelectScript.getSelectedIndices().length == 1) {
                        if (bntEditOrCancel.getText().equals("Editar")) {
                            if (modeEdit(true)) {
                                refreshLabelStatus("Editando script...");
                                addLogTextArea("Editando script...");
                                bntNew.setEnabled(false);
                                bntEditOrCancel.setText("Cancelar");
                                bntSave.setEnabled(true);
                                bntDelete.setEnabled(true);
                                editing = true;
                            }
                        } else if (bntEditOrCancel.getText().equals("Cancelar")) {
                            if (modeEdit(false)) {

                                bntNew.setEnabled(true);
                                bntSave.setEnabled(false);
                                bntEditOrCancel.setText("Editar");
                                bntEditOrCancel.setEnabled(true);
                                bntDelete.setEnabled(true);
                                editing = false;
                                carregaCampos(listSelectScript.getSelectedIndex());
                                refreshLabelStatus("Edição cancelada...");
                                addLogTextArea("Edição cancelada...");
                            }
                        }
                    } else {
                        cleanFilds();
                        refreshLabelStatus("Selecione apenas um fluxo");
                        JOptionPane.showMessageDialog(null, "Por favor, selecione apenas uma funcionalidade para edita-lá", "Atenção", JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    refreshLabelStatus("Selecione um fluxo");
                    JOptionPane.showMessageDialog(null, "Por favor, selecione uma funcionalidade para edita-lá", "Atenção", JOptionPane.WARNING_MESSAGE);
                }

                return null;
            }

            @Override
            protected void done() {
                getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }

        }.execute();
    }//GEN-LAST:event_bntEditOrCancelActionPerformed

    private void bntDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntDeleteActionPerformed

        try {
            refreshLabelStatus("Aguarde, excluindo script...");
            if (listSelectScript.getSelectedIndex() != -1) {
                if (JOptionPane.showConfirmDialog(null, "Deseja excluir o(s) script(s) selecionados?", "Atenção", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    String system = fieldComboboxSystem.getSelectedItem().toString();
                    deleteScripts(system);
                    DefaultListModel modelSelectTestCase = (DefaultListModel) listSelectScript.getModel();
                    modelSelectTestCase.clear();
                    carregaScript(system);
                    cleanFilds();
                    getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

                }

            } else {
                JOptionPane.showMessageDialog(null, "Por favor, selecione um script para exclui-lo", "Atenção", JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception ex) {
            getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            addLogTextArea(ex);
            Logger.getLogger(ManageScriptsScreenView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao desconhecido, \nverifique mais detalhes no botão de log.", "Erro", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_bntDeleteActionPerformed

    private void bntNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntNewActionPerformed
        newScript();
    }//GEN-LAST:event_bntNewActionPerformed

    private void bntSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntSaveActionPerformed

        new SwingWorker() {

            @Override
            protected Object doInBackground() throws Exception {
                getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                save();

                return null;
            }

            @Override
            protected void done() {
                getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }

        }.execute();
    }//GEN-LAST:event_bntSaveActionPerformed

    private void bntSubirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntSubirActionPerformed
        moveUpTestCases();
    }//GEN-LAST:event_bntSubirActionPerformed

    private void bntDesceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntDesceActionPerformed
        moveDownTestCases();
    }//GEN-LAST:event_bntDesceActionPerformed

    private void bntExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntExcluirActionPerformed

        new SwingWorker() {

            @Override
            protected Object doInBackground() throws Exception {
                getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                deleteTestCases();
                refreshQTDCTs();

                return null;
            }

            @Override
            protected void done() {
                getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }

        }.execute();
    }//GEN-LAST:event_bntExcluirActionPerformed

    private void bntAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntAddActionPerformed

        new SwingWorker() {

            @Override
            protected Object doInBackground() throws Exception {
                getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                openScreenAddComponent();

                return null;
            }

            @Override
            protected void done() {
                getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }

        }.execute();

    }//GEN-LAST:event_bntAddActionPerformed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        if (editing) {
            JOptionPane.showMessageDialog(null, "Cancele ou termine a edição para fechar a janela", "Informação", JOptionPane.INFORMATION_MESSAGE);
        } else {
            this.dispose();
        }
    }//GEN-LAST:event_formInternalFrameClosing

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dialogLog.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void bntLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntLimparActionPerformed
        statusTextArea.setText("");
    }//GEN-LAST:event_bntLimparActionPerformed

    private void carregaCampos(int i) {
        DefaultListModel modelSelectTestCase = (DefaultListModel) listSelectScript.getModel();
        DefaultListModel modelFlow = (DefaultListModel) listScripts.getModel();
        modelFlow.clear();

        ScriptBean script = (ScriptBean) modelSelectTestCase.getElementAt(i);
        fieldTextName.setText(script.getNameScript());
        fieldComboboxSystem.setSelectedItem(script.getSystem());
        fieldTextDescription.setText(script.getDescription());
        fieldTextFlowId.setText(script.getNameScript());

        for (String componente : script.getComponents()) {
            modelFlow.addElement(componente);
        }
    }

    private void setEnableButtons(boolean enable) {
        bntAdd.setEnabled(enable);
        bntExcluir.setEnabled(enable);
        bntSubir.setEnabled(enable);
        bntDesce.setEnabled(enable);
        bntEditOrCancel.setEnabled(enable);
        bntDelete.setEnabled(enable);
        bntNew.setEnabled(enable);
        bntSearch.setEnabled(enable);

    }

    private void setEnableFields(boolean enable) {
        jTextFieldNome.setEnabled(enable);
        jComboBoxSistemas.setEnabled(enable);
        listSelectScript.setEnabled(enable);
        fieldComboboxSystem.setEnabled(enable);
        fieldTextDescription.setEnabled(enable);
        fieldTextName.setEnabled(enable);
        listScripts.setEnabled(enable);
    }

    private void setEnableComponentsSearch(boolean enable) {
        bntSearch.setEnabled(enable);
        jTextFieldNome.setEnabled(enable);
        jComboBoxSistemas.setEnabled(enable);
        listSelectScript.setEnabled(enable);
    }

    private void setEnableComponents(boolean enable) {
        fieldComboboxSystem.setEnabled(enable);
        fieldTextDescription.setEnabled(enable);
        fieldTextName.setEnabled(enable);
        listScripts.setEnabled(enable);
        bntAdd.setEnabled(enable);
        bntExcluir.setEnabled(enable);
        bntSubir.setEnabled(enable);
        bntDesce.setEnabled(enable);
        bntEditOrCancel.setEnabled(enable);
        bntDelete.setEnabled(enable);
        bntSave.setEnabled(enable);
    }

    private boolean modeEdit(boolean active) {
        try {

            DefaultListModel modelSelectTestCase = (DefaultListModel) listSelectScript.getModel();
            ScriptBean script = (ScriptBean) modelSelectTestCase.getElementAt(listSelectScript.getSelectedIndex());
            String nameFile = script.getNameScript()+ ProjectSettings.EXTENSION_FILE_PROPERTY;
            String system = fieldComboboxSystem.getSelectedItem().toString();
            if (active) {
                if (ScriptRN.getInstance().verifyExistFile(nameFile, system)) {
                    //tenta bloquear o arquivo
                    if (ScriptRN.getInstance().lockFile(nameFile, system)) {
                        setEnableComponents(active);
                        setEnableComponentsSearch(!active);
                        editing = true;
                        return true;
                    } else {
                        JOptionPane.showMessageDialog(null, "O script está bloqueado pelo usuário: " + ScriptRN.getInstance().getUserLock(script.getNameScript()+ ProjectSettings.EXTENSION_FILE_PROPERTY, system) + "\n"
                                + "para editar tente novamente mais tarde! ", "Atenção", JOptionPane.WARNING_MESSAGE);
                        editing = false;
                        return false;
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "O script foi excluído, favor atualize a lista. ", "Atenção", JOptionPane.WARNING_MESSAGE);
                    editing = false;
                    return false;
                }

            } else {
                if (ScriptRN.getInstance().unLockFile(nameFile, system)) {
                    setEnableComponents(active);
                    setEnableComponentsSearch(!active);
                    editing = false;
                    return true;
                } else {
                    JOptionPane.showMessageDialog(null, "Não foi possível desbloquear o arquivo: " + ScriptRN.getInstance().getUserLock(script.getNameScript() + ProjectSettings.EXTENSION_FILE_PROPERTY, system), "Atenção", JOptionPane.WARNING_MESSAGE);
                    editing = true;
                    return false;
                }
            }

        } catch (IOException ex) {
            addLogTextArea(ex);
            Logger.getLogger(ManageScriptsScreenView.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao manipular algum arquivo, \nverifique mais detalhes no botão de log.", "Erro", JOptionPane.ERROR_MESSAGE);
            editing = false;
            return false;

        } catch (SVNException ex) {
            addLogTextArea(ex);
            Logger.getLogger(ManageScriptsScreenView.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Ocorreu um erro com o SVN, \nverifique mais detalhes no botão de log.", "Erro", JOptionPane.ERROR_MESSAGE);
            editing = false;
            return false;

        } catch (Exception ex) {
            addLogTextArea(ex);
            Logger.getLogger(ManageScriptsScreenView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao desconhecido, \nverifique mais detalhes no botão de log.", "Erro", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
            editing = false;
            return false;
        }

    }

    private void cleanFilds() {

        fieldTextDescription.setText("");
        fieldTextName.setText("");
        fieldTextFlowId.setText("");
        DefaultListModel model = (DefaultListModel) listScripts.getModel();
        model.clear();
    }

    private boolean save() {
        try {
            DefaultListModel model = (DefaultListModel) listScripts.getModel();
            if (!fieldTextName.getText().isEmpty() || model.isEmpty()) {

                ScriptBean script = new ScriptBean();

                DefaultListModel modelSelectionTestCase = (DefaultListModel) listSelectScript.getModel();

                List<String> testCases = new ArrayList<String>();

                for (int i = 0; i < model.size(); i++) {
                    testCases.add(model.getElementAt(i).toString());
                }

                script.setDescription(fieldTextDescription.getText());
                script.setNameScript(fieldTextName.getText());
                script.setSystem(fieldComboboxSystem.getSelectedItem().toString());

                script.setComponents(testCases);

                if (fieldTextFlowId.getText() == null || fieldTextFlowId.getText().equals("")) {
                    refreshLabelStatus("Salvando novo script...");
                    script.setDate(FunctiosDates.getDateActual());
                    String id = ScriptRN.getInstance().saveFile(null, script).replace(ProjectSettings.EXTENSION_FILE_PROPERTY, "");
                    if (listSelectScript.getModel().getSize() > 0) {
                        modelSelectionTestCase.clear();
                    }
                    carregaScript(jComboBoxSistemas.getSelectedItem().toString());
                    //Action Item 18037 - Raphael - Inicio
                    for (int i = 0; i < modelSelectionTestCase.getSize(); i++) {
                        if (((ScriptBean) modelSelectionTestCase.getElementAt(i)).getNameScript().equals(id)) {
                            listSelectScript.getSelectionModel().setSelectionInterval(i, i);
                            carregaCampos(i);
                        }
                    }
//                cleanFilds();
                    //Action Item 18037 - Raphael - fim
                    setEnableComponents(false);
                    setEnableComponentsSearch(true);
                    bntNew.setText("Novo");
                    editing = false;
                    refreshLabelStatus("novo fluxo cadastrado.");
                    addLogTextArea("Novo fluxo cadastrado" + script.toString());
                } else {
                    refreshLabelStatus("salvando alterações do componente.");
                    addLogTextArea("salvando alterações do componente." + script.toString());
                    script.setDate(((ScriptBean) modelSelectionTestCase.getElementAt(listSelectScript.getSelectedIndex())).getDate());
                    String nome = ((ScriptBean) modelSelectionTestCase.getElementAt(listSelectScript.getSelectedIndex())).getNameScript();
                    if (nome.equals(script.getNameScript())) {
                        ScriptRN.getInstance().saveFile(script.getNameScript() + ProjectSettings.EXTENSION_FILE_PROPERTY, script).replace(ProjectSettings.EXTENSION_FILE_PROPERTY, "");

                    } else {
                        ScriptRN.getInstance().renomear(nome, script.getSystem(), script.getNameScript(), script);
                    }

                    if (listSelectScript.getModel().getSize() > 0) {
                        modelSelectionTestCase.clear();
                    }
                    carregaScript(script.getSystem());
                    for (int i = 0; i < modelSelectionTestCase.getSize(); i++) {
                        if (((ScriptBean) modelSelectionTestCase.getElementAt(i)).getNameScript().equals(script.getNameScript())) {
                            listSelectScript.getSelectionModel().setSelectionInterval(i, i);
                            carregaCampos(i);
                        }
                    }
                    carregaCampos(listSelectScript.getSelectedIndex());
                    modeEdit(false);
                    bntEditOrCancel.setText("Editar");
                    refreshLabelStatus("alterações do script concluidas.");
                    addLogTextArea("alterações do script concluidas.." + script.toString());
                }

                bntNew.setEnabled(true);
                bntDelete.setEnabled(true);
                JOptionPane.showMessageDialog(null, "Salvo com sucesso!", "Informação", JOptionPane.INFORMATION_MESSAGE);

                return true;
            } else {
                JOptionPane.showMessageDialog(null, "Campo Obrigatórios não preenchidos, \nverifique o campo nome e o CTs", "Alerta", JOptionPane.WARNING_MESSAGE);
                return false;
            }
        } catch (SVNException ex) {
            refreshLabelStatus("Erro na tentativa de salvar o script, verifique detalhes no log");
            addLogTextArea(ex);
            Logger.getLogger(ManageScriptsScreenView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Ocorreu um erro com o SVN, \nverifique mais detalhes no botão de log.", "Erro", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
            return false;

        } catch (IOException ex) {
            refreshLabelStatus("Erro na tentativa de salvar o script, verifique detalhes no log");
            addLogTextArea(ex);
            Logger.getLogger(ManageScriptsScreenView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao manipular algum arquivo, \nverifique mais detalhes no botão de log.", "Erro", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
            return false;
        } catch (Exception ex) {
            refreshLabelStatus("Erro na tentativa de salvar o fluxo, verifique detalhes no log");
            addLogTextArea(ex);
            Logger.getLogger(ManageScriptsScreenView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao desconhecido, \nverifique mais detalhes no botão de log.", "Erro", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
            return false;
        }
    }

    private void newScript() {
        try {

            if (bntNew.getText().equals("Novo")) {
                setEnableFields(true);
                setEnableComponentsSearch(false);
                bntDelete.setEnabled(false);
                bntEditOrCancel.setEnabled(false);
                bntSave.setEnabled(true);
                bntAdd.setEnabled(true);
                bntExcluir.setEnabled(true);
                bntSubir.setEnabled(true);
                bntDesce.setEnabled(true);
                bntNew.setText("Cancelar");
                cleanFilds();
                addLogTextArea("usuário iniciou cadastro de um novo script.");
                refreshLabelStatus("usuário iniciou cadastro de um novo script.");

            } else {
                setEnableFields(false);
                setEnableComponentsSearch(true);
                bntDelete.setEnabled(true);
                bntEditOrCancel.setEnabled(true);
                bntSave.setEnabled(false);
                bntAdd.setEnabled(false);
                bntExcluir.setEnabled(false);
                bntSubir.setEnabled(false);
                bntDesce.setEnabled(false);
                bntNew.setText("Novo");
                addLogTextArea("usuário cancelou cadastro de um novo script.");
                refreshLabelStatus("usuário cancelou cadastro de um novo script.");

            }
        } catch (Exception ex) {
            addLogTextArea(ex);
            Logger.getLogger(ManageScriptsScreenView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao desconhecido, \nverifique mais detalhes no botão de log.", "Erro", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();

        }

    }

    private void moveUpTestCases() {
        try {
            DefaultListModel model = (DefaultListModel) listScripts.getModel();
            Object obj = listScripts.getSelectedValue();
            if (obj != null) {
                int index = listScripts.getSelectedIndex();
                if (index != 0) {
                    model.remove(index);
                    model.add(index - 1, obj);
                    listScripts.setSelectedIndex(index - 1);
                }
            }
        } catch (Exception ex) {
            addLogTextArea(ex);
            Logger.getLogger(ManageScriptsScreenView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao desconhecido, \nverifique mais detalhes no botão de log.", "Erro", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();

        }
    }

    private void moveDownTestCases() {
        try {
            DefaultListModel model = (DefaultListModel) listScripts.getModel();
            Object obj = listScripts.getSelectedValue();
            int size = model.size() - 1;
            if (obj != null) {
                int index = listScripts.getSelectedIndex();
                if (size != index) {
                    model.remove(index);
                    model.add(index + 1, obj);
                    listScripts.setSelectedIndex(index + 1);
                }
            }
        } catch (Exception ex) {
            addLogTextArea(ex);
            Logger.getLogger(ManageScriptsScreenView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao desconhecido, \nverifique mais detalhes no botão de log.", "Erro", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();

        }
    }

    private void deleteTestCases() {
        try {
            DefaultListModel model = (DefaultListModel) listScripts.getModel();
            Object[] itens = listScripts.getSelectedValues();
            for (int i = 0; i < itens.length; i++) {
                model.removeElement(itens[i]);
            }
        } catch (Exception ex) {
            addLogTextArea(ex);
            Logger.getLogger(ManageScriptsScreenView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao desconhecido, \nverifique mais detalhes no botão de log.", "Erro", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();

        }

    }

    private void openScreenAddComponent() {
        try {
            refreshLabelStatus("Abrindo janela de cts...");
            ChooseComponenteScreenView view = new ChooseComponenteScreenView(fieldComboboxSystem.getSelectedItem().toString(), this,null,true);
//            view.centralizaJanela();
//            view.setVisible(true);
            
        } catch (ClassNotFoundException ex) {
            refreshLabelStatus("Erro na tentativa de abrir janelas cts, verifique detalhes no log");
            addLogTextArea(ex);
            Logger.getLogger(ManageComponentsScreenView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao desconhecido, \nverifique mais detalhes no botão de log.", "Erro", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

    public void addScript(List<String> scripts) {
        DefaultListModel model = (DefaultListModel) listScripts.getModel();
        for (String ct : scripts) {
//             fieldTextFlowDescription.setText(fieldTextFlowDescription.getText()+"\n"+ct.substring(ct.indexOf("-")));
            //ct.substring(0,ct.indexOf("-"))
            model.addElement(ct);
        }
        refreshQTDCTs();
    }

    private void addLogTextArea(Exception ex) {
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        ex.printStackTrace(pw);
        String exceptionText = sw.toString();
        statusTextArea.setText(statusTextArea.getText() + "\n" + exceptionText);
    }

    private void addLogTextArea(String text) {
        statusTextArea.setText(statusTextArea.getText() + "\n" + text);
    }

    private void addIconInButton() {
        ButtonIconBean iconBean = new ButtonIconBean();
        bntSearch.setIcon(iconBean.getIconBntSearchCt());
        bntSubir.setIcon(iconBean.getIconBntMoveStepTop());
        bntDesce.setIcon(iconBean.getIconBntMoveStepBottom());
        bntSave.setIcon(iconBean.getIconBntSaveMinimum());
        bntNew.setIcon(iconBean.getIconBntAddNewCt());
        bntAdd.setIcon(iconBean.getIconBntAddNewStep());
        bntExcluir.setIcon(iconBean.getIconBntRemoveStep());
        bntDelete.setIcon(iconBean.getIconBntRemoveCt());
    }

    private void refreshQTDCTs() {
        DefaultListModel model = (DefaultListModel) listScripts.getModel();
        labelQtdCts.setText("Quantidade de Scripts: " + model.getSize());
    }

    private void deleteScripts(String system) throws IOException, SVNException {
        List<ScriptBean> scripts = new ArrayList<ScriptBean>();
        Object[] objs = listSelectScript.getSelectedValues();

        for (Object obj : objs) {
            scripts.add((ScriptBean) obj);
        }

        String retorno = ScriptRN.getInstance().delete(scripts, system);
        if (retorno != null) {
            refreshLabelStatus(retorno);
            addLogTextArea(retorno);
            JOptionPane.showMessageDialog(null, "" + retorno, "Exclusão do script não permitida", JOptionPane.WARNING_MESSAGE);
        }

    }

    private void refreshLabelStatus(String text) {
        new SwingWorker() {

            @Override
            protected Object doInBackground() throws Exception {
                labelStatus.setText("Status: " + text);

                return null;
            }

            @Override
            protected void done() {
                labelStatus.repaint();
            }

        }.execute();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntAdd;
    private javax.swing.JButton bntDelete;
    private javax.swing.JButton bntDesce;
    private javax.swing.JButton bntEditOrCancel;
    private javax.swing.JButton bntExcluir;
    private javax.swing.JButton bntLimpar;
    private javax.swing.JButton bntNew;
    private javax.swing.JButton bntSave;
    private javax.swing.JButton bntSearch;
    private javax.swing.JButton bntSubir;
    private javax.swing.JDialog dialogLog;
    private javax.swing.JComboBox<String> fieldComboboxSystem;
    private javax.swing.JTextArea fieldTextDescription;
    private javax.swing.JTextField fieldTextFlowId;
    private javax.swing.JTextField fieldTextName;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBoxSistemas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextFieldNome;
    private javax.swing.JLabel labelQtdCts;
    private javax.swing.JLabel labelQtdFluxos;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JList<String> listScripts;
    private javax.swing.JList<String> listSelectScript;
    private javax.swing.JTextArea statusTextArea;
    // End of variables declaration//GEN-END:variables
public void centralizaJanela() {
        Dimension d = this.getDesktopPane().getSize();
        this.setLocation((d.width - this.getSize().width) / 2, (d.height - this.getSize().height) / 2);
    }

}
