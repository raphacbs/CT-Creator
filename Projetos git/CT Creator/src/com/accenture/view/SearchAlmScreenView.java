/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.accenture.view;

import com.accenture.alm.ExtraiALM;
import com.accenture.alm.MyHandler;
import com.accenture.control.ManipulaDadosSQLite;
import com.accenture.control.Xml;
import com.accenture.bean.CtAlm;
import com.accenture.bean.Plano;
import com.accenture.bean.UsuarioALM;
import com.accenture.util.CheckTreeManager;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.event.KeyEvent;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.ButtonModel;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.SwingWorker;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeSelectionModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import javax.xml.soap.Node;
//import jdk.nashorn.internal.runtime.regexp.joni.Regex;
import org.apache.log4j.PropertyConfigurator;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.JDOMException;
import org.jdom2.input.SAXBuilder;
import org.jsoup.Jsoup;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

/**
 *
 * @author raphael.da.silva
 */
public class SearchAlmScreenView extends javax.swing.JInternalFrame {

    private DefaultMutableTreeNode noPai;
    private JTree arvoreCtALM;
    private List<Plano> listPlano = new ArrayList<Plano>();
    private ManipulaDadosSQLite banco = new ManipulaDadosSQLite();
    private org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(SearchAlmScreenView.class);
    private ButtonGroup grupo = new ButtonGroup();

    /**
     * Creates new form GUIConsultaALM
     */
    public SearchAlmScreenView() throws SQLException, ClassNotFoundException, IOException {
        initComponents();

        //butoes radios de agrupamento
        grupo.add(radioSistema);
        grupo.add(radioComplexidade);
        ButtonModel modelRadio = radioSistema.getModel();
        grupo.setSelected(modelRadio, true);

        criaArvore();

        Properties props = new Properties();
        props.load(new FileInputStream("log4j.properties"));
        PropertyConfigurator.configure(props);

        new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                // carregando os combobox

                List<String> sistemaMaster = banco.selectConfALL("TB_SISTEMA_MASTER");

                //Carrega comboBox sistema master com os dados da tabela
                int tamanhoSistemaMaster = sistemaMaster.size();
                for (int cont = 0; cont < tamanhoSistemaMaster; cont++) {
                    comboSistemaMaster.addItem(sistemaMaster.get(cont));
                }

                return null;
            }

            @Override
            protected void done() {

            }

        }.execute();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        textNomeCTALM = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        textNomeCT = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        textSistema = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaDescricao = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        textQtdSistema = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        textQtdStep = new javax.swing.JTextField();
        textCenarioTeste = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        textRequisito = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        textTpRequisito = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        textFornecedor = new javax.swing.JTextField();
        textSistemaEnvolvidos = new javax.swing.JTextField();
        textComplexidade = new javax.swing.JTextField();
        textTipo = new javax.swing.JTextField();
        comboSistemaMaster = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        bntPesquisarALM = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        radioSistema = new javax.swing.JRadioButton();
        radioComplexidade = new javax.swing.JRadioButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Consultar CT ALM");

        jLabel1.setText("Nome do CT: ");

        textNomeCTALM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textNomeCTALMActionPerformed(evt);
            }
        });

        jScrollPane2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jScrollPane2KeyReleased(evt);
            }
        });

        textNomeCT.setEditable(false);

        jLabel2.setText("Nome CT:");

        textSistema.setEditable(false);

        jLabel3.setText("Sistema:");

        textAreaDescricao.setEditable(false);
        textAreaDescricao.setColumns(20);
        textAreaDescricao.setRows(5);
        jScrollPane1.setViewportView(textAreaDescricao);
        textAreaDescricao.setWrapStyleWord(true);
        textAreaDescricao.setLineWrap(true);

        jLabel4.setText("Descrição:");

        jLabel5.setText("Qtd Sistemas: ");

        textQtdSistema.setEditable(false);

        jLabel6.setText("Qtd Steps: ");

        textQtdStep.setEditable(false);

        textCenarioTeste.setEditable(false);

        jLabel7.setText("Cenário Teste:");

        textRequisito.setEditable(false);

        jLabel8.setText("Requisíto:");

        textTpRequisito.setEditable(false);

        jLabel9.setText("Tipo Requisito:");

        jLabel10.setText("Fornecedor:");

        jLabel11.setText("Sistemas Envolvidos:");

        jLabel12.setText("Complexidade:");

        jLabel13.setText("Tipo:");

        textFornecedor.setEditable(false);

        textSistemaEnvolvidos.setEditable(false);

        textComplexidade.setEditable(false);

        textTipo.setEditable(false);

        comboSistemaMaster.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                comboSistemaMasterFocusLost(evt);
            }
        });

        jLabel14.setText("Sistema:");

        bntPesquisarALM.setText("Pesquisar ALM");
        bntPesquisarALM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntPesquisarALMActionPerformed(evt);
            }
        });

        jLabel15.setText("Agrupar por:");

        radioSistema.setText("Sistema");

        radioComplexidade.setText("Complexidade");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(textNomeCTALM, javax.swing.GroupLayout.PREFERRED_SIZE, 681, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(bntPesquisarALM))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(radioSistema)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(radioComplexidade))
                            .addComponent(comboSistemaMaster, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 298, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(textSistema, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
                            .addComponent(textNomeCT))
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel5)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textQtdSistema, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textQtdStep, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textComplexidade, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(textSistemaEnvolvidos)
                            .addComponent(textFornecedor)
                            .addComponent(textTpRequisito)
                            .addComponent(textRequisito)
                            .addComponent(textCenarioTeste)
                            .addComponent(textTipo))
                        .addGap(94, 94, 94))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(textNomeCTALM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bntPesquisarALM))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioSistema)
                    .addComponent(radioComplexidade)
                    .addComponent(jLabel15))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(comboSistemaMaster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(textNomeCT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(textQtdSistema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(textSistema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(textQtdStep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(textCenarioTeste, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(textRequisito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(textTpRequisito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(textFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(textSistemaEnvolvidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12)
                                    .addComponent(textComplexidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13)
                                    .addComponent(textTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 304, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())))
        );

        comboSistemaMaster.addItem("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboSistemaMasterFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_comboSistemaMasterFocusLost

    }//GEN-LAST:event_comboSistemaMasterFocusLost

    private void bntPesquisarALMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntPesquisarALMActionPerformed
        final Frame GUIPrincipal = new MainScreenView();

        new SwingWorker() {
            JDialog aguarde = new WaitScreenView((JFrame) GUIPrincipal, true);

            @Override
            protected Object doInBackground() throws Exception {
                aguarde.setLocationRelativeTo(GUIPrincipal);
                aguarde.setVisible(true);
                consultaALM();

                return null;
            }

            @Override
            protected void done() {
                aguarde.dispose();
            }

        }.execute();


    }//GEN-LAST:event_bntPesquisarALMActionPerformed

    private void textNomeCTALMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textNomeCTALMActionPerformed
        // TODO add your handling code here:
        final Frame GUIPrincipal = new MainScreenView();

        new SwingWorker() {
            JDialog aguarde = new WaitScreenView((JFrame) GUIPrincipal, true);

            @Override
            protected Object doInBackground() throws Exception {
                aguarde.setLocationRelativeTo(GUIPrincipal);
                aguarde.setVisible(true);
                consultaALM();

                return null;
            }

            @Override
            protected void done() {
                aguarde.dispose();
            }

        }.execute();

    }//GEN-LAST:event_textNomeCTALMActionPerformed

    private void jScrollPane2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jScrollPane2KeyReleased

    }//GEN-LAST:event_jScrollPane2KeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntPesquisarALM;
    private javax.swing.JComboBox comboSistemaMaster;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton radioComplexidade;
    private javax.swing.JRadioButton radioSistema;
    private javax.swing.JTextArea textAreaDescricao;
    private javax.swing.JTextField textCenarioTeste;
    private javax.swing.JTextField textComplexidade;
    private javax.swing.JTextField textFornecedor;
    private javax.swing.JTextField textNomeCT;
    private javax.swing.JTextField textNomeCTALM;
    private javax.swing.JTextField textQtdSistema;
    private javax.swing.JTextField textQtdStep;
    private javax.swing.JTextField textRequisito;
    private javax.swing.JTextField textSistema;
    private javax.swing.JTextField textSistemaEnvolvidos;
    private javax.swing.JTextField textTipo;
    private javax.swing.JTextField textTpRequisito;
    // End of variables declaration//GEN-END:variables
 public void centralizaJanela() {
        Dimension d = this.getDesktopPane().getSize();
        this.setLocation((d.width - this.getSize().width) / 2, (d.height - this.getSize().height) / 2);
    }

    public void converteXMLString(String xml) {
        try {
            SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
//            InputSource input = new InputSource("/home/ronaldo/Documentos/receita.xml");
            ByteArrayInputStream is = new ByteArrayInputStream(xml.getBytes());
            parser.parse(is, new MyHandler());
        } catch (ParserConfigurationException ex) { // TODO Auto-generated catch block e.printStackTrace(); } catch (SAXException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } 
            JOptionPane.showMessageDialog(this, "Ocorreu o erro: " + ex.getMessage() + ex.getLocalizedMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (SAXException ex) {
            JOptionPane.showMessageDialog(this, "Ocorreu o erro: " + ex.getMessage() + ex.getLocalizedMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Ocorreu o erro: " + ex.getMessage() + ex.getLocalizedMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void criaArvore() {
        noPai = new DefaultMutableTreeNode("CTs ALM");
//        DefaultMutableTreeNode ct = new DefaultMutableTreeNode("CTs ALM");
//        noPai.add(ct);
//        DefaultMutableTreeNode ctExistente = new DefaultMutableTreeNode("CTs existentes");
//        noPai.add(ctExistente);

        arvoreCtALM = new JTree(noPai);
        jScrollPane2.setViewportView(arvoreCtALM);
//        checkTreeManager = new CheckTreeManager(arvoreImportacao);

        arvoreCtALM.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

        arvoreCtALM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                getClickArvore(evt);
            }
        });

        arvoreCtALM.addKeyListener(new java.awt.event.KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
                System.out.println("Seta precionada");
            }

            @Override
            public void keyPressed(KeyEvent ke) {
                System.out.println("Seta precionada");
            }

            @Override
            public void keyReleased(KeyEvent ke) {
                if ((ke.getKeyCode() == KeyEvent.VK_UP) || (ke.getKeyCode() == KeyEvent.VK_DOWN)) {
                    System.out.println("Seta precionada");
                    String nomect = arvoreCtALM.getSelectionPath().getLastPathComponent().toString();
                    for (int i = 0; i < listPlano.size(); i++) {
                        if (listPlano.get(i).getCasoTeste().equals(nomect)) {

                            textNomeCT.setText(convertFromUTF8(listPlano.get(i).getCasoTeste()));
                            textAreaDescricao.setText(convertFromUTF8(listPlano.get(i).getDescCasoTeste()));

                            textSistema.setText(convertFromUTF8(listPlano.get(i).getSistemaMaster()));
                            textCenarioTeste.setText(convertFromUTF8(listPlano.get(i).getCenarioTeste()));
                            textQtdSistema.setText(convertFromUTF8(listPlano.get(i).getQtdSistemas() + ""));
                            textQtdStep.setText(convertFromUTF8(listPlano.get(i).getQtdStep() + ""));
                            textRequisito.setText(convertFromUTF8(listPlano.get(i).getRequisito()));
                            textTpRequisito.setText(convertFromUTF8(listPlano.get(i).getTpRequisito()));
                            textFornecedor.setText(convertFromUTF8(listPlano.get(i).getFornecedor()));
                            textSistemaEnvolvidos.setText(convertFromUTF8(listPlano.get(i).getSistemasEnvolvidos()));
                            textComplexidade.setText(convertFromUTF8(listPlano.get(i).getComplexidade()));
                            textTipo.setText(convertFromUTF8(listPlano.get(i).getType()));
                            textAreaDescricao.setText(Jsoup.parse(convertFromUTF8(listPlano.get(i).getDescCasoTeste())).text());

                        }
                    }
                }
            }
        });

        repaint();
    }

    private void addFilho(String no) {
        DefaultMutableTreeNode filho = new DefaultMutableTreeNode(no);
        noPai.add(filho);
        arvoreCtALM = new JTree(noPai);
        jScrollPane2.setViewportView(arvoreCtALM);

        arvoreCtALM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                getClickArvore(evt);
            }
        });

//        checkTreeManager = new CheckTreeManager(arvoreImportacao);
        arvoreCtALM.addKeyListener(new java.awt.event.KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {

            }

            @Override
            public void keyPressed(KeyEvent ke) {

            }

            @Override
            public void keyReleased(KeyEvent ke) {
                if ((ke.getKeyCode() == KeyEvent.VK_UP) || (ke.getKeyCode() == KeyEvent.VK_DOWN)) {

                    String nomect = arvoreCtALM.getSelectionPath().getLastPathComponent().toString();
                    for (int i = 0; i < listPlano.size(); i++) {
                        if (listPlano.get(i).getCasoTeste().equals(nomect)) {

                            textNomeCT.setText(convertFromUTF8(listPlano.get(i).getCasoTeste()));
                            textAreaDescricao.setText(convertFromUTF8(listPlano.get(i).getDescCasoTeste()));

                            textSistema.setText(convertFromUTF8(listPlano.get(i).getSistemaMaster()));
                            textCenarioTeste.setText(convertFromUTF8(listPlano.get(i).getCenarioTeste()));
                            textQtdSistema.setText(convertFromUTF8(listPlano.get(i).getQtdSistemas() + ""));
                            textQtdStep.setText(convertFromUTF8(listPlano.get(i).getQtdStep() + ""));
                            textRequisito.setText(convertFromUTF8(listPlano.get(i).getRequisito()));
                            textTpRequisito.setText(convertFromUTF8(listPlano.get(i).getTpRequisito()));
                            textFornecedor.setText(convertFromUTF8(listPlano.get(i).getFornecedor()));
                            textSistemaEnvolvidos.setText(convertFromUTF8(listPlano.get(i).getSistemasEnvolvidos()));
                            textComplexidade.setText(convertFromUTF8(listPlano.get(i).getComplexidade()));
                            textTipo.setText(convertFromUTF8(listPlano.get(i).getType()));
                            textAreaDescricao.setText(Jsoup.parse(convertFromUTF8(listPlano.get(i).getDescCasoTeste())).text());

                        }
                    }
                }
            }
        });
        repaint();

    }

    private void addPai(String no) {
        DefaultMutableTreeNode filho = new DefaultMutableTreeNode(no);
        ((DefaultMutableTreeNode) arvoreCtALM.getPathForRow(2).getLastPathComponent()).add(filho);
        repaint();
    }

    private void addFilho(String no, int posicaoPai) {
        DefaultMutableTreeNode filho = new DefaultMutableTreeNode(no);
        ((DefaultMutableTreeNode) arvoreCtALM.getPathForRow(posicaoPai).getLastPathComponent()).add(filho);
        arvoreCtALM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                getClickArvore(evt);
            }
        });

        repaint();
    }

    private void removeAllFilhos() {

        ((DefaultMutableTreeNode) arvoreCtALM.getPathForRow(0).getLastPathComponent()).removeAllChildren();

        arvoreCtALM = new JTree(noPai);
        jScrollPane2.setViewportView(arvoreCtALM);
//        checkTreeManager = new CheckTreeManager(arvoreImportacao);
        repaint();

//        ((DefaultMutableTreeNode) arvoreCtALM.getPathForRow(2).getLastPathComponent()).removeAllChildren();
//        arvoreCtALM = new JTree(noPai);
//        jScrollPane2.setViewportView(arvoreCtALM);
////        checkTreeManager = new CheckTreeManager(arvoreImportacao);
//        repaint();
        arvoreCtALM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                getClickArvore(evt);
            }
        });
    }

    private void getClickArvore(java.awt.event.MouseEvent evt) {

        String nomect = arvoreCtALM.getSelectionPath().getLastPathComponent().toString();
        for (int i = 0; i < listPlano.size(); i++) {
            if (UTF8toISO(listPlano.get(i).getCasoTeste()).equals(nomect)) {

                textNomeCT.setText(UTF8toISO(listPlano.get(i).getCasoTeste()));
//                textAreaDescricao.setText(UTF8toISO(listPlano.get(i).getDescCasoTeste()));

                textSistema.setText(UTF8toISO(listPlano.get(i).getSistemaMaster()));
                textCenarioTeste.setText(UTF8toISO(listPlano.get(i).getCenarioTeste()));
                textQtdSistema.setText(UTF8toISO(listPlano.get(i).getQtdSistemas() + ""));
                textQtdStep.setText(UTF8toISO(listPlano.get(i).getQtdStep() + ""));
                textRequisito.setText(UTF8toISO(listPlano.get(i).getRequisito()));
                textTpRequisito.setText(UTF8toISO(listPlano.get(i).getTpRequisito()));
                textFornecedor.setText(UTF8toISO(listPlano.get(i).getFornecedor()));
                textSistemaEnvolvidos.setText(UTF8toISO(listPlano.get(i).getSistemasEnvolvidos()));
                textComplexidade.setText(UTF8toISO(listPlano.get(i).getComplexidade()));
                textTipo.setText(UTF8toISO(listPlano.get(i).getType()));
                textAreaDescricao.setText(removeHTML(UTF8toISO(listPlano.get(i).getDescCasoTeste())));
            }
        }

    }

    private void consultaALM() {
        List<CtAlm> listCtALM = new ArrayList<CtAlm>();
        CtAlm ctalm = new CtAlm();

        if (noPai.getChildCount() != 0) {
            removeAllFilhos();
        }

        limpaCampos();

        try {
            ManipulaDadosSQLite bd = new ManipulaDadosSQLite();
            UsuarioALM usuarioALM = bd.getUsuarioALM();

            String nomeCT = "*";
            Xml x = new Xml();

            nomeCT = nomeCT + textNomeCTALM.getText();

            nomeCT = nomeCT.replace(" ", "*");

            nomeCT = nomeCT + "*";

            ExtraiALM alm = new ExtraiALM();
            logger.info("Consulta o texto pesquisado no ALM");
//            x.identaXml(alm.getCTALM(nomeCT, usuarioALM.getUsuario(),usuarioALM.getSenha()));
            logger.info("Iniciando o método :  x.geraArquivoXml(x.identaXml(alm.getCTALM(nomeCT, usuarioALM.getUsuario(), usuarioALM.getSenha())));");
            x.geraArquivoXml(alm.getCTALM(nomeCT, usuarioALM.getUsuario(), usuarioALM.getSenha()));
            logger.info("fim do método:  x.geraArquivoXml(x.identaXml(alm.getCTALM(nomeCT, usuarioALM.getUsuario(), usuarioALM.getSenha())));");
//            converteXMLString(jTextArea1.getText());
            StringBuffer texto = new StringBuffer();

//            listCtALM = x.lerXML();
            logger.info("Início do método: x.lerXML()");
            listPlano = x.lerXML();
            logger.info("Fim do método: x.lerXML()");
            logger.info("Tamanho da Lista de plano capturado do xml: " + listPlano.size());

            if (listPlano == null) {

            } else {
//            listPlano = ctalm.getCTs(listCtALM);

//                for (int i = 0; i < listPlano.size(); i++) {
////                texto.append("CAMPO: " + listCtALM.get(i).getCampo() + System.getProperty("line.separator") + "VALOR: " + listCtALM.get(i).getValor() + System.getProperty("line.separator"));
////                texto.append(System.getProperty("line.separator"));
//                    addFilho(convertFromUTF8(listPlano.get(i).getCasoTeste()));
//                }
                montaArvore(listPlano);

//            jTextArea1.setText(texto.toString());
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Ocorreu o erro: " + ex.getMessage() + ex.getLocalizedMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            logger.error("Erro : " + ex.getMessage());
        }

    }

    public void limpaCampos() {
        textNomeCT.setText("");
        textAreaDescricao.setText("");
        textSistema.setText("");
        textCenarioTeste.setText("");
        textQtdSistema.setText("");
        textQtdStep.setText("");
        textRequisito.setText("");
        textTpRequisito.setText("");
        textFornecedor.setText("");
        textSistemaEnvolvidos.setText("");
        textComplexidade.setText("");
        textTipo.setText("");
    }

    // convert from UTF-8 -> internal Java String format
    public static String convertFromUTF8(String s) {
        String out = null;
        try {
            out = new String(s.getBytes("UTF-8"), "ISO-8859-1");
        } catch (java.io.UnsupportedEncodingException e) {
            return null;
        }
        return out;
    }

    public static String UTF8toISO(String str) {
        Charset utf8charset = Charset.forName("UTF-8");
        Charset iso88591charset = Charset.forName("ISO-8859-1");

        ByteBuffer inputBuffer = ByteBuffer.wrap(str.getBytes());

        // decode UTF-8
        CharBuffer data = utf8charset.decode(inputBuffer);

        // encode ISO-8559-1
        ByteBuffer outputBuffer = iso88591charset.encode(data);
        byte[] outputData = outputBuffer.array();

        return new String(outputData);
    }

    public void montaArvore(List<Plano> list) {

        String pasta;
        int qtdLinhas = 0;
        boolean existePastaSistema = false;
        int linhaPasta = 0;

        if (radioSistema.isSelected()) {
            logger.info("Filtro Sistema selecionado");
            for (int i = 0; i < list.size(); i++) {
                logger.info("Iniciado laço para pecorrer a lista");
                qtdLinhas = arvoreCtALM.getRowCount();
                logger.info("Tamanho da arvore: " + qtdLinhas);
                for (int j = 0; j < qtdLinhas; j++) {
                    arvoreCtALM.setSelectionRow(j);
                    pasta = arvoreCtALM.getSelectionPath().getLastPathComponent().toString();
                    logger.info("Nome da linha " + j + " na arvore: " + pasta);

                    if (pasta.equals(UTF8toISO(list.get(i).getSistemaMaster()))) {
                        existePastaSistema = true;
                        linhaPasta = j;
                        break;
                    } else {
                        existePastaSistema = false;
                    }

                }

                if (existePastaSistema) {
                    addFilho(UTF8toISO(list.get(i).getCasoTeste()), linhaPasta);
                    repaint();

                } else {
                    addFilho(UTF8toISO(list.get(i).getSistemaMaster()));
                    qtdLinhas = arvoreCtALM.getRowCount();
                    if (qtdLinhas == 0) {
                        addFilho(UTF8toISO(list.get(i).getCasoTeste()), qtdLinhas);
                    } else {
                        addFilho(UTF8toISO(list.get(i).getCasoTeste()), qtdLinhas - 1);
                    }

                }

            }
            repaint();
            qtdLinhas = arvoreCtALM.getRowCount();

        } else {
            logger.info("Filtro Complexidade selecionado");
            for (int i = 0; i < list.size(); i++) {
                logger.info("Iniciado laço para pecorrer a lista");
                qtdLinhas = arvoreCtALM.getRowCount();
                logger.info("Tamanho da arvore: " + qtdLinhas);
                for (int j = 0; j < qtdLinhas; j++) {
                    arvoreCtALM.setSelectionRow(j);
                    pasta = arvoreCtALM.getSelectionPath().getLastPathComponent().toString();
                    logger.info("Nome da linha " + j + " na arvore: " + pasta);

                    if (pasta.equals(UTF8toISO(list.get(i).getComplexidade()))) {
                        existePastaSistema = true;
                        linhaPasta = j;
                        break;
                    } else {
                        existePastaSistema = false;
                    }

                }

                if (existePastaSistema) {
                    addFilho(UTF8toISO(list.get(i).getCasoTeste()), linhaPasta);
                    repaint();

                } else {
                    addFilho(UTF8toISO(list.get(i).getComplexidade()));
                    qtdLinhas = arvoreCtALM.getRowCount();
                    if (qtdLinhas == 0) {
                        addFilho(UTF8toISO(list.get(i).getCasoTeste()), qtdLinhas);
                    } else {
                        addFilho(UTF8toISO(list.get(i).getCasoTeste()), qtdLinhas - 1);
                    }

                }

            }
            repaint();
            qtdLinhas = arvoreCtALM.getRowCount();
        }

    }

    public static String removeHTML(String html) {
        html = html.replaceAll("\\<.*?>", "");
        html = html.replaceAll("&nbsp;", "");
        html = html.replaceAll("&amp;", "");

        return html;
    }

}
