/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.accenture.GUI;

import java.awt.Color;
import java.awt.Frame;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.IOException;
import java.net.URL;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;

/**
 *
 * @author raphael.da.silva
 */
public class GUIPrincipal extends javax.swing.JFrame {

    private JDesktopPane desktop; // = new JDesktopPane();; 

    /**
     * Creates new form Principal
     */
    public GUIPrincipal() {
        setTitle("CT Creator");
        initComponents();

//        URL url = this.getClass().getResource("carregado.gif");
//        Image iconeTitulo = Toolkit.getDefaultToolkit().getImage(url);
        
//        this.setIconImage(null);
        
        desktop = new JDesktopPane();
        setDesktop(desktop);
        desktop.setBackground(Color.LIGHT_GRAY);
        setContentPane(desktop);
        desktop.setDragMode(JDesktopPane.OUTLINE_DRAG_MODE);
        setExtendedState(MAXIMIZED_BOTH);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuCT = new javax.swing.JMenu();
        itemMenuNovoCT = new javax.swing.JMenuItem();
        itemMenuCTExistente = new javax.swing.JMenuItem();
        itemMenuPesquisaCT = new javax.swing.JMenuItem();
        menuImportarExportar = new javax.swing.JMenu();
        itemMenuImportaStepPadrao = new javax.swing.JMenuItem();
        itemMenuImportaCT = new javax.swing.JMenuItem();
        itemMenuExportarPlanilhaTI = new javax.swing.JMenuItem();
        menuConfiguracoes = new javax.swing.JMenu();
        itemMenuConfiguracoes = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("principal"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1274, 749));

        menuCT.setText("Casos de Teste");
        menuCT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCTActionPerformed(evt);
            }
        });

        itemMenuNovoCT.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK));
        itemMenuNovoCT.setText("Novo CT");
        itemMenuNovoCT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuNovoCTActionPerformed(evt);
            }
        });
        menuCT.add(itemMenuNovoCT);

        itemMenuCTExistente.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK));
        itemMenuCTExistente.setText("Novo CT a partir de existente");
        itemMenuCTExistente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuCTExistenteActionPerformed(evt);
            }
        });
        menuCT.add(itemMenuCTExistente);

        itemMenuPesquisaCT.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK));
        itemMenuPesquisaCT.setText("Pesquisar/Editar CT");
        itemMenuPesquisaCT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuPesquisaCTActionPerformed(evt);
            }
        });
        menuCT.add(itemMenuPesquisaCT);

        jMenuBar1.add(menuCT);

        menuImportarExportar.setText("Importar/Exportar");

        itemMenuImportaStepPadrao.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        itemMenuImportaStepPadrao.setText("Importar Steps Padrão");
        itemMenuImportaStepPadrao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuImportaStepPadraoActionPerformed(evt);
            }
        });
        menuImportarExportar.add(itemMenuImportaStepPadrao);

        itemMenuImportaCT.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        itemMenuImportaCT.setText("Importar CTs / Configurações");
        itemMenuImportaCT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuImportaCTActionPerformed(evt);
            }
        });
        menuImportarExportar.add(itemMenuImportaCT);

        itemMenuExportarPlanilhaTI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK));
        itemMenuExportarPlanilhaTI.setText("Exportar para planilha de carga TI");
        itemMenuExportarPlanilhaTI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuExportarPlanilhaTIActionPerformed(evt);
            }
        });
        menuImportarExportar.add(itemMenuExportarPlanilhaTI);

        jMenuBar1.add(menuImportarExportar);

        menuConfiguracoes.setText("Configurações");

        itemMenuConfiguracoes.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.ALT_MASK));
        itemMenuConfiguracoes.setText("Opções");
        itemMenuConfiguracoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuConfiguracoesActionPerformed(evt);
            }
        });
        menuConfiguracoes.add(itemMenuConfiguracoes);

        jMenuBar1.add(menuConfiguracoes);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 637, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 395, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuCTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCTActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_menuCTActionPerformed

    private void itemMenuNovoCTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuNovoCTActionPerformed
        // TODO add your handling code here:
        final JFrame GUIPrincipal = this;
        new SwingWorker() {
            JDialog aguarde = new GUIAguarde(GUIPrincipal, true);

            @Override
            protected Object doInBackground() throws Exception {
                aguarde.setLocationRelativeTo(GUIPrincipal);
                aguarde.setVisible(true);
                aguarde.setModal(true);
                criaJanelaTelaCadCT();
                return null;
            }

            @Override
            protected void done() {
//                aguarde.setModal(false);
                aguarde.dispose();
            }

        }.execute();


    }//GEN-LAST:event_itemMenuNovoCTActionPerformed

    private void itemMenuCTExistenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuCTExistenteActionPerformed
        try {
            criaJanelaSelecionaCT();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu o seguinte erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu o seguinte erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_itemMenuCTExistenteActionPerformed

    private void itemMenuImportaStepPadraoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuImportaStepPadraoActionPerformed
        try {
            criaJanelaTelaImportaStepPadrao();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu o seguinte erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu o seguinte erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu o seguinte erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_itemMenuImportaStepPadraoActionPerformed

    private void itemMenuPesquisaCTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuPesquisaCTActionPerformed
        try {
            // TODO add your handling code here:
            criaJanelaMantemCT();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu o seguinte erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu o seguinte erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu o seguinte erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_itemMenuPesquisaCTActionPerformed

    private void itemMenuImportaCTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuImportaCTActionPerformed
        try {
            criaJanelaImportaPlanilha();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu o seguinte erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu o seguinte erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu o seguinte erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_itemMenuImportaCTActionPerformed

    private void itemMenuExportarPlanilhaTIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuExportarPlanilhaTIActionPerformed
        try {
            criaJanelaTelaExportaPlanilha();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu o seguinte erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu o seguinte erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu o seguinte erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_itemMenuExportarPlanilhaTIActionPerformed

    private void itemMenuConfiguracoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuConfiguracoesActionPerformed
        try {
            criaJanelaTelaConfiguracoes();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu o seguinte erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu o seguinte erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu o seguinte erro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_itemMenuConfiguracoesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem itemMenuCTExistente;
    private javax.swing.JMenuItem itemMenuConfiguracoes;
    private javax.swing.JMenuItem itemMenuExportarPlanilhaTI;
    private javax.swing.JMenuItem itemMenuImportaCT;
    private javax.swing.JMenuItem itemMenuImportaStepPadrao;
    private javax.swing.JMenuItem itemMenuNovoCT;
    private javax.swing.JMenuItem itemMenuPesquisaCT;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenu menuCT;
    private javax.swing.JMenu menuConfiguracoes;
    private javax.swing.JMenu menuImportarExportar;
    // End of variables declaration//GEN-END:variables

    static GUICadCT guiJanelaCadCT;
    GUIImportacao guiJanelaImportacao;
    GUISelecionaCT guiJanelaSelecionaCT;
    GUIManterStepPadrao guiJanelaManterStepPadrao;
    GUIImportaStepPadrao guiImportaStepPadrao;
    GUIMantemCT guiMantemCt;
    GUIImportaPlanilha guiImportaPlanilha;
    GUIExportaPlanilha guiExportaPlanilha;
    GUIConfiguracoes guiConfiguracoes;
    
     public void criaJanelaTelaConfiguracoes() throws IOException, ClassNotFoundException, SQLException {

        guiConfiguracoes = new GUIConfiguracoes();
        desktop.add(guiConfiguracoes);
        guiConfiguracoes.centralizaJanela();     
        guiConfiguracoes.setVisible(true);
    }
    
    public void criaJanelaTelaExportaPlanilha() throws IOException, ClassNotFoundException, SQLException {

        guiExportaPlanilha = new GUIExportaPlanilha();
        desktop.add(guiExportaPlanilha);
        guiExportaPlanilha.centralizaJanela();     
        guiExportaPlanilha.setVisible(true);
    }
    
    public void criaJanelaTelaImportaStepPadrao() throws IOException, ClassNotFoundException, SQLException {

        guiImportaStepPadrao = new GUIImportaStepPadrao();
        desktop.add(guiImportaStepPadrao);
        guiImportaStepPadrao.centralizaJanela();

        guiImportaStepPadrao.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        guiImportaStepPadrao.setVisible(true);
        System.out.println("-**-criou-**-");

    }

    public void criaJanelaTelaCadCT() throws IOException, ClassNotFoundException, SQLException {

        guiJanelaCadCT = new GUICadCT();
        desktop.add(guiJanelaCadCT);
        guiJanelaCadCT.centralizaJanela();

        guiJanelaCadCT.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        guiJanelaCadCT.setVisible(true);
        System.out.println("-**-criou-**-");

    }

    private void criaJanelaTelaImportacao() {

        if (guiJanelaImportacao == null) { 
            guiJanelaImportacao = new GUIImportacao();
            desktop.add(guiJanelaImportacao);
            guiJanelaImportacao.setVisible(true);

            guiJanelaImportacao.setDefaultCloseOperation(HIDE_ON_CLOSE);
            guiJanelaImportacao.setVisible(true);

        }
    }

    private void criaJanelaSelecionaCT() throws SQLException, ClassNotFoundException {

        guiJanelaSelecionaCT = new GUISelecionaCT();
        desktop.add(guiJanelaSelecionaCT);
        guiJanelaSelecionaCT.centralizaJanela();
        guiJanelaSelecionaCT.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        guiJanelaSelecionaCT.setVisible(true);

    }
    
    private void criaJanelaStepPadrao() throws SQLException, ClassNotFoundException, IOException {

        guiJanelaManterStepPadrao = new GUIManterStepPadrao();
        desktop.add(guiJanelaManterStepPadrao);
        guiJanelaManterStepPadrao.centralizaJanela();
        guiJanelaManterStepPadrao.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        guiJanelaManterStepPadrao.setVisible(true);

    }
    
    private void criaJanelaMantemCT() throws SQLException, ClassNotFoundException, IOException {

        guiMantemCt = new GUIMantemCT();
        desktop.add(guiMantemCt);
        guiMantemCt.centralizaJanela();
        guiMantemCt.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        guiMantemCt.setVisible(true);

    }
    
    private void criaJanelaImportaPlanilha() throws SQLException, ClassNotFoundException, IOException {
        guiImportaPlanilha = new GUIImportaPlanilha();
        desktop.add(guiImportaPlanilha);
        guiImportaPlanilha.centralizaJanela();
        guiImportaPlanilha.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        guiImportaPlanilha.setVisible(true);
        
    }

    public JDesktopPane getDesktop() {
        return desktop;
    }

    public void setDesktop(JDesktopPane desktop) {
        this.desktop = desktop;
    }

    public GUIPrincipal getPrincipal() {
        return this;
    }
    
    public void removeTela(JInternalFrame intFrame){  
        intFrame.setVisible(false);  
        desktop.remove(intFrame);  
    }  

}
